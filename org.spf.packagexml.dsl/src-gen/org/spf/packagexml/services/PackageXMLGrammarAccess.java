/*
 * generated by Xtext 2.22.0
 */
package org.spf.packagexml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PackageXMLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXmlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionSTRINGTerminalRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		private final Keyword cQuestionMarkGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPackageKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFormatKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cFormatAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFormatSTRINGTerminalRuleCall_10_0 = (RuleCall)cFormatAssignment_10.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTagsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTagsTagParserRuleCall_12_0 = (RuleCall)cTagsAssignment_12.eContents().get(0);
		private final Keyword cLessThanSignKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cSolidusKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cPackageKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cGreaterThanSignKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Package:
		//	"<?" "xml" "version" "=" version=STRING "?>"
		//	"<" 'package' 'format' "=" format=STRING ">"
		//	tags+=Tag*
		//	"<" "/" 'package' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<?" "xml" "version" "=" version=STRING "?>" "<" 'package' 'format' "=" format=STRING ">" tags+=Tag* "<" "/" 'package'
		//">"
		public Group getGroup() { return cGroup; }
		
		//"<?"
		public Keyword getLessThanSignQuestionMarkKeyword_0() { return cLessThanSignQuestionMarkKeyword_0; }
		
		//"xml"
		public Keyword getXmlKeyword_1() { return cXmlKeyword_1; }
		
		//"version"
		public Keyword getVersionKeyword_2() { return cVersionKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//version=STRING
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_4_0() { return cVersionSTRINGTerminalRuleCall_4_0; }
		
		//"?>"
		public Keyword getQuestionMarkGreaterThanSignKeyword_5() { return cQuestionMarkGreaterThanSignKeyword_5; }
		
		//"<"
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//'package'
		public Keyword getPackageKeyword_7() { return cPackageKeyword_7; }
		
		//'format'
		public Keyword getFormatKeyword_8() { return cFormatKeyword_8; }
		
		//"="
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//format=STRING
		public Assignment getFormatAssignment_10() { return cFormatAssignment_10; }
		
		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_10_0() { return cFormatSTRINGTerminalRuleCall_10_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_11() { return cGreaterThanSignKeyword_11; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_12() { return cTagsAssignment_12; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_12_0() { return cTagsTagParserRuleCall_12_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_13() { return cLessThanSignKeyword_13; }
		
		//"/"
		public Keyword getSolidusKeyword_14() { return cSolidusKeyword_14; }
		
		//'package'
		public Keyword getPackageKeyword_15() { return cPackageKeyword_15; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_16() { return cGreaterThanSignKeyword_16; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.Tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersionTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionTagParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMaintainerTagParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLicenseTagParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDependencyTagParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExportTagParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAuthorTagParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUrlTagParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cArbitraryTagParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Tag:
		//	NameTag | VersionTag | DescriptionTag | MaintainerTag | LicenseTag | DependencyTag | ExportTag | AuthorTag | UrlTag |
		//	ArbitraryTag;
		@Override public ParserRule getRule() { return rule; }
		
		//NameTag | VersionTag | DescriptionTag | MaintainerTag | LicenseTag | DependencyTag | ExportTag | AuthorTag | UrlTag |
		//ArbitraryTag
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameTag
		public RuleCall getNameTagParserRuleCall_0() { return cNameTagParserRuleCall_0; }
		
		//VersionTag
		public RuleCall getVersionTagParserRuleCall_1() { return cVersionTagParserRuleCall_1; }
		
		//DescriptionTag
		public RuleCall getDescriptionTagParserRuleCall_2() { return cDescriptionTagParserRuleCall_2; }
		
		//MaintainerTag
		public RuleCall getMaintainerTagParserRuleCall_3() { return cMaintainerTagParserRuleCall_3; }
		
		//LicenseTag
		public RuleCall getLicenseTagParserRuleCall_4() { return cLicenseTagParserRuleCall_4; }
		
		//DependencyTag
		public RuleCall getDependencyTagParserRuleCall_5() { return cDependencyTagParserRuleCall_5; }
		
		//ExportTag
		public RuleCall getExportTagParserRuleCall_6() { return cExportTagParserRuleCall_6; }
		
		//AuthorTag
		public RuleCall getAuthorTagParserRuleCall_7() { return cAuthorTagParserRuleCall_7; }
		
		//UrlTag
		public RuleCall getUrlTagParserRuleCall_8() { return cUrlTagParserRuleCall_8; }
		
		//ArbitraryTag
		public RuleCall getArbitraryTagParserRuleCall_9() { return cArbitraryTagParserRuleCall_9; }
	}
	public class NameTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.NameTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaredPackageNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclaredPackageNameDeclaredPackageNameParserRuleCall_3_0 = (RuleCall)cDeclaredPackageNameAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* GENERAL TAGS */ NameTag:
		//	"<" 'name' ">" declaredPackageName=DeclaredPackageName "<" "/" 'name' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" 'name' ">" declaredPackageName=DeclaredPackageName "<" "/" 'name' ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//declaredPackageName=DeclaredPackageName
		public Assignment getDeclaredPackageNameAssignment_3() { return cDeclaredPackageNameAssignment_3; }
		
		//DeclaredPackageName
		public RuleCall getDeclaredPackageNameDeclaredPackageNameParserRuleCall_3_0() { return cDeclaredPackageNameDeclaredPackageNameParserRuleCall_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }
		
		//'name'
		public Keyword getNameKeyword_6() { return cNameKeyword_6; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class DeclaredPackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.DeclaredPackageName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DeclaredPackageName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VersionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.VersionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionVERSION_TERMINALTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//VersionTag:
		//	"<" 'version' ">" version=VERSION_TERMINAL "<" "/" 'version' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" 'version' ">" version=VERSION_TERMINAL "<" "/" 'version' ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'version'
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//version=VERSION_TERMINAL
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//VERSION_TERMINAL
		public RuleCall getVersionVERSION_TERMINALTerminalRuleCall_3_0() { return cVersionVERSION_TERMINALTerminalRuleCall_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }
		
		//'version'
		public Keyword getVersionKeyword_6() { return cVersionKeyword_6; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class DescriptionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.DescriptionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDescriptionTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionTextAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cDescriptionTextAlternatives_4_0 = (Alternatives)cDescriptionTextAssignment_4.eContents().get(0);
		private final RuleCall cDescriptionTextIDTerminalRuleCall_4_0_0 = (RuleCall)cDescriptionTextAlternatives_4_0.eContents().get(0);
		private final RuleCall cDescriptionTextSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cDescriptionTextAlternatives_4_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DescriptionTag:
		//	{DescriptionTag}
		//	"<" 'description' ">" descriptionText+=(ID | STRING)* "<" "/" "description" ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{DescriptionTag} "<" 'description' ">" descriptionText+=(ID | STRING)* "<" "/" "description" ">"
		public Group getGroup() { return cGroup; }
		
		//{DescriptionTag}
		public Action getDescriptionTagAction_0() { return cDescriptionTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//descriptionText+=(ID | STRING)*
		public Assignment getDescriptionTextAssignment_4() { return cDescriptionTextAssignment_4; }
		
		//(ID | STRING)
		public Alternatives getDescriptionTextAlternatives_4_0() { return cDescriptionTextAlternatives_4_0; }
		
		//ID
		public RuleCall getDescriptionTextIDTerminalRuleCall_4_0_0() { return cDescriptionTextIDTerminalRuleCall_4_0_0; }
		
		//STRING
		public RuleCall getDescriptionTextSTRINGTerminalRuleCall_4_0_1() { return cDescriptionTextSTRINGTerminalRuleCall_4_0_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//"description"
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class MaintainerTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.MaintainerTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMaintainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmailKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEmailAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEmailSTRINGTerminalRuleCall_4_0 = (RuleCall)cEmailAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaintainerTextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cMaintainerTextAlternatives_6_0 = (Alternatives)cMaintainerTextAssignment_6.eContents().get(0);
		private final RuleCall cMaintainerTextIDTerminalRuleCall_6_0_0 = (RuleCall)cMaintainerTextAlternatives_6_0.eContents().get(0);
		private final RuleCall cMaintainerTextSTRINGTerminalRuleCall_6_0_1 = (RuleCall)cMaintainerTextAlternatives_6_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSolidusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cMaintainerKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//MaintainerTag:
		//	"<" 'maintainer' 'email' "=" email=STRING ">" maintainerText+=(ID | STRING)* "<" "/" 'maintainer' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" 'maintainer' 'email' "=" email=STRING ">" maintainerText+=(ID | STRING)* "<" "/" 'maintainer' ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'maintainer'
		public Keyword getMaintainerKeyword_1() { return cMaintainerKeyword_1; }
		
		//'email'
		public Keyword getEmailKeyword_2() { return cEmailKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//email=STRING
		public Assignment getEmailAssignment_4() { return cEmailAssignment_4; }
		
		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_4_0() { return cEmailSTRINGTerminalRuleCall_4_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//maintainerText+=(ID | STRING)*
		public Assignment getMaintainerTextAssignment_6() { return cMaintainerTextAssignment_6; }
		
		//(ID | STRING)
		public Alternatives getMaintainerTextAlternatives_6_0() { return cMaintainerTextAlternatives_6_0; }
		
		//ID
		public RuleCall getMaintainerTextIDTerminalRuleCall_6_0_0() { return cMaintainerTextIDTerminalRuleCall_6_0_0; }
		
		//STRING
		public RuleCall getMaintainerTextSTRINGTerminalRuleCall_6_0_1() { return cMaintainerTextSTRINGTerminalRuleCall_6_0_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_7() { return cLessThanSignKeyword_7; }
		
		//"/"
		public Keyword getSolidusKeyword_8() { return cSolidusKeyword_8; }
		
		//'maintainer'
		public Keyword getMaintainerKeyword_9() { return cMaintainerKeyword_9; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }
	}
	public class LicenseTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.LicenseTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLicenseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLicenseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLicenseIDTerminalRuleCall_3_0 = (RuleCall)cLicenseAssignment_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLicenseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LicenseTag:
		//	"<" 'license' ">" license=ID "<" "/" 'license' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" 'license' ">" license=ID "<" "/" 'license' ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'license'
		public Keyword getLicenseKeyword_1() { return cLicenseKeyword_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//license=ID
		public Assignment getLicenseAssignment_3() { return cLicenseAssignment_3; }
		
		//ID
		public RuleCall getLicenseIDTerminalRuleCall_3_0() { return cLicenseIDTerminalRuleCall_3_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }
		
		//'license'
		public Keyword getLicenseKeyword_6() { return cLicenseKeyword_6; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
	}
	public class DependencyTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.DependencyTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuildDependDependencyTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExecDependDependencyTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuildToolDependDependencyTagParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRunDependencyTagParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* DEPENDENCY TAGS */ DependencyTag Tag:
		//	BuildDependDependencyTag
		//	| ExecDependDependencyTag
		//	| BuildToolDependDependencyTag
		//	| RunDependencyTag;
		@Override public ParserRule getRule() { return rule; }
		
		//BuildDependDependencyTag | ExecDependDependencyTag | BuildToolDependDependencyTag | RunDependencyTag
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BuildDependDependencyTag
		public RuleCall getBuildDependDependencyTagParserRuleCall_0() { return cBuildDependDependencyTagParserRuleCall_0; }
		
		//ExecDependDependencyTag
		public RuleCall getExecDependDependencyTagParserRuleCall_1() { return cExecDependDependencyTagParserRuleCall_1; }
		
		//BuildToolDependDependencyTag
		public RuleCall getBuildToolDependDependencyTagParserRuleCall_2() { return cBuildToolDependDependencyTagParserRuleCall_2; }
		
		//RunDependencyTag
		public RuleCall getRunDependencyTagParserRuleCall_3() { return cRunDependencyTagParserRuleCall_3; }
	}
	public class RunDependencyTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.RunDependencyTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRunDependencyTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRun_dependKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRun_dependKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//RunDependencyTag DependencyTag:
		//	{RunDependencyTag}
		//	"<" 'run_depend' ">" name=ID "<" "/" 'run_depend' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{RunDependencyTag} "<" 'run_depend' ">" name=ID "<" "/" 'run_depend' ">"
		public Group getGroup() { return cGroup; }
		
		//{RunDependencyTag}
		public Action getRunDependencyTagAction_0() { return cRunDependencyTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'run_depend'
		public Keyword getRun_dependKeyword_2() { return cRun_dependKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'run_depend'
		public Keyword getRun_dependKeyword_7() { return cRun_dependKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class BuildDependDependencyTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.BuildDependDependencyTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildDependDependencyTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBuild_dependKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBuild_dependKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BuildDependDependencyTag DependencyTag:
		//	{BuildDependDependencyTag}
		//	"<" 'build_depend' ">" name=ID "<" "/" 'build_depend' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{BuildDependDependencyTag} "<" 'build_depend' ">" name=ID "<" "/" 'build_depend' ">"
		public Group getGroup() { return cGroup; }
		
		//{BuildDependDependencyTag}
		public Action getBuildDependDependencyTagAction_0() { return cBuildDependDependencyTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'build_depend'
		public Keyword getBuild_dependKeyword_2() { return cBuild_dependKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'build_depend'
		public Keyword getBuild_dependKeyword_7() { return cBuild_dependKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class ExecDependDependencyTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ExecDependDependencyTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecDependDependencyTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExec_dependKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cExec_dependKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ExecDependDependencyTag DependencyTag:
		//	{ExecDependDependencyTag}
		//	"<" 'exec_depend' ">" name=ID "<" "/" 'exec_depend' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecDependDependencyTag} "<" 'exec_depend' ">" name=ID "<" "/" 'exec_depend' ">"
		public Group getGroup() { return cGroup; }
		
		//{ExecDependDependencyTag}
		public Action getExecDependDependencyTagAction_0() { return cExecDependDependencyTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'exec_depend'
		public Keyword getExec_dependKeyword_2() { return cExec_dependKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'exec_depend'
		public Keyword getExec_dependKeyword_7() { return cExec_dependKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class BuildToolDependDependencyTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.BuildToolDependDependencyTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuildToolDependDependencyTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBuildtool_dependKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cBuildtool_dependKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BuildToolDependDependencyTag DependencyTag:
		//	{BuildToolDependDependencyTag}
		//	"<" 'buildtool_depend' ">" name=ID "<" "/" 'buildtool_depend' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{BuildToolDependDependencyTag} "<" 'buildtool_depend' ">" name=ID "<" "/" 'buildtool_depend' ">"
		public Group getGroup() { return cGroup; }
		
		//{BuildToolDependDependencyTag}
		public Action getBuildToolDependDependencyTagAction_0() { return cBuildToolDependDependencyTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'buildtool_depend'
		public Keyword getBuildtool_dependKeyword_2() { return cBuildtool_dependKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'buildtool_depend'
		public Keyword getBuildtool_dependKeyword_7() { return cBuildtool_dependKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class ExportTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ExportTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExportTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArbitrary_tagsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArbitrary_tagsArbitraryTagParserRuleCall_4_0 = (RuleCall)cArbitrary_tagsAssignment_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cExportKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ExportTag:
		//	{ExportTag}
		//	"<" 'export' ">"
		//	arbitrary_tags+=ArbitraryTag*
		//	"<" "/" 'export' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{ExportTag} "<" 'export' ">" arbitrary_tags+=ArbitraryTag* "<" "/" 'export' ">"
		public Group getGroup() { return cGroup; }
		
		//{ExportTag}
		public Action getExportTagAction_0() { return cExportTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'export'
		public Keyword getExportKeyword_2() { return cExportKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//arbitrary_tags+=ArbitraryTag*
		public Assignment getArbitrary_tagsAssignment_4() { return cArbitrary_tagsAssignment_4; }
		
		//ArbitraryTag
		public RuleCall getArbitrary_tagsArbitraryTagParserRuleCall_4_0() { return cArbitrary_tagsArbitraryTagParserRuleCall_4_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//"/"
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'export'
		public Keyword getExportKeyword_7() { return cExportKeyword_7; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_8() { return cGreaterThanSignKeyword_8; }
	}
	public class AuthorTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.AuthorTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAuthorTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAuthorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEmailKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEmailAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEmailSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cEmailAssignment_3_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAuthorTextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cAuthorTextAlternatives_5_0 = (Alternatives)cAuthorTextAssignment_5.eContents().get(0);
		private final RuleCall cAuthorTextIDTerminalRuleCall_5_0_0 = (RuleCall)cAuthorTextAlternatives_5_0.eContents().get(0);
		private final RuleCall cAuthorTextSTRINGTerminalRuleCall_5_0_1 = (RuleCall)cAuthorTextAlternatives_5_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSolidusKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAuthorKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AuthorTag:
		//	{AuthorTag}
		//	"<" 'author' ('email' "=" email=STRING)? ">" authorText+=(ID | STRING)* "<" "/" 'author' ">";
		@Override public ParserRule getRule() { return rule; }
		
		//{AuthorTag} "<" 'author' ('email' "=" email=STRING)? ">" authorText+=(ID | STRING)* "<" "/" 'author' ">"
		public Group getGroup() { return cGroup; }
		
		//{AuthorTag}
		public Action getAuthorTagAction_0() { return cAuthorTagAction_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'author'
		public Keyword getAuthorKeyword_2() { return cAuthorKeyword_2; }
		
		//('email' "=" email=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'email'
		public Keyword getEmailKeyword_3_0() { return cEmailKeyword_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//email=STRING
		public Assignment getEmailAssignment_3_2() { return cEmailAssignment_3_2; }
		
		//STRING
		public RuleCall getEmailSTRINGTerminalRuleCall_3_2_0() { return cEmailSTRINGTerminalRuleCall_3_2_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//authorText+=(ID | STRING)*
		public Assignment getAuthorTextAssignment_5() { return cAuthorTextAssignment_5; }
		
		//(ID | STRING)
		public Alternatives getAuthorTextAlternatives_5_0() { return cAuthorTextAlternatives_5_0; }
		
		//ID
		public RuleCall getAuthorTextIDTerminalRuleCall_5_0_0() { return cAuthorTextIDTerminalRuleCall_5_0_0; }
		
		//STRING
		public RuleCall getAuthorTextSTRINGTerminalRuleCall_5_0_1() { return cAuthorTextSTRINGTerminalRuleCall_5_0_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_6() { return cLessThanSignKeyword_6; }
		
		//"/"
		public Keyword getSolidusKeyword_7() { return cSolidusKeyword_7; }
		
		//'author'
		public Keyword getAuthorKeyword_8() { return cAuthorKeyword_8; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
	}
	public class UrlTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.UrlTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUrlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeSTRINGTerminalRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUrlAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUrlIDTerminalRuleCall_6_0 = (RuleCall)cUrlAssignment_6.eContents().get(0);
		private final Keyword cLessThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSolidusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cUrlKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UrlTag:
		//	"<" "url" "type" "=" type=STRING ">" url=ID "<" "/" "url" ">";
		@Override public ParserRule getRule() { return rule; }
		
		//"<" "url" "type" "=" type=STRING ">" url=ID "<" "/" "url" ">"
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//"url"
		public Keyword getUrlKeyword_1() { return cUrlKeyword_1; }
		
		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//type=STRING
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_4_0() { return cTypeSTRINGTerminalRuleCall_4_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
		
		//url=ID
		public Assignment getUrlAssignment_6() { return cUrlAssignment_6; }
		
		//ID
		public RuleCall getUrlIDTerminalRuleCall_6_0() { return cUrlIDTerminalRuleCall_6_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_7() { return cLessThanSignKeyword_7; }
		
		//"/"
		public Keyword getSolidusKeyword_8() { return cSolidusKeyword_8; }
		
		//"url"
		public Keyword getUrlKeyword_9() { return cUrlKeyword_9; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }
	}
	public class ArbitraryTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ArbitraryTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cSolidusKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInnerTextAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Alternatives cInnerTextAlternatives_3_1_1_0 = (Alternatives)cInnerTextAssignment_3_1_1.eContents().get(0);
		private final RuleCall cInnerTextIDTerminalRuleCall_3_1_1_0_0 = (RuleCall)cInnerTextAlternatives_3_1_1_0.eContents().get(0);
		private final RuleCall cInnerTextSTRINGTerminalRuleCall_3_1_1_0_1 = (RuleCall)cInnerTextAlternatives_3_1_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cSolidusKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_1_4 = (RuleCall)cGroup_3_1.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_3_1_5 = (Keyword)cGroup_3_1.eContents().get(5);
		
		//ArbitraryTag:
		//	"<" name=ID attributes+=Attribute* ("/" ">" | ">" innerText+=(ID | STRING)* "<" "/" ID ">");
		@Override public ParserRule getRule() { return rule; }
		
		//"<" name=ID attributes+=Attribute* ("/" ">" | ">" innerText+=(ID | STRING)* "<" "/" ID ">")
		public Group getGroup() { return cGroup; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//("/" ">" | ">" innerText+=(ID | STRING)* "<" "/" ID ">")
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//"/" ">"
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//"/"
		public Keyword getSolidusKeyword_3_0_0() { return cSolidusKeyword_3_0_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3_0_1() { return cGreaterThanSignKeyword_3_0_1; }
		
		//">" innerText+=(ID | STRING)* "<" "/" ID ">"
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3_1_0() { return cGreaterThanSignKeyword_3_1_0; }
		
		//innerText+=(ID | STRING)*
		public Assignment getInnerTextAssignment_3_1_1() { return cInnerTextAssignment_3_1_1; }
		
		//(ID | STRING)
		public Alternatives getInnerTextAlternatives_3_1_1_0() { return cInnerTextAlternatives_3_1_1_0; }
		
		//ID
		public RuleCall getInnerTextIDTerminalRuleCall_3_1_1_0_0() { return cInnerTextIDTerminalRuleCall_3_1_1_0_0; }
		
		//STRING
		public RuleCall getInnerTextSTRINGTerminalRuleCall_3_1_1_0_1() { return cInnerTextSTRINGTerminalRuleCall_3_1_1_0_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_3_1_2() { return cLessThanSignKeyword_3_1_2; }
		
		//"/"
		public Keyword getSolidusKeyword_3_1_3() { return cSolidusKeyword_3_1_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1_4() { return cIDTerminalRuleCall_3_1_4; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3_1_5() { return cGreaterThanSignKeyword_3_1_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	key=ID "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID "=" value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final PackageElements pPackage;
	private final TagElements pTag;
	private final NameTagElements pNameTag;
	private final DeclaredPackageNameElements pDeclaredPackageName;
	private final VersionTagElements pVersionTag;
	private final DescriptionTagElements pDescriptionTag;
	private final MaintainerTagElements pMaintainerTag;
	private final LicenseTagElements pLicenseTag;
	private final DependencyTagElements pDependencyTag;
	private final RunDependencyTagElements pRunDependencyTag;
	private final BuildDependDependencyTagElements pBuildDependDependencyTag;
	private final ExecDependDependencyTagElements pExecDependDependencyTag;
	private final BuildToolDependDependencyTagElements pBuildToolDependDependencyTag;
	private final ExportTagElements pExportTag;
	private final AuthorTagElements pAuthorTag;
	private final UrlTagElements pUrlTag;
	private final ArbitraryTagElements pArbitraryTag;
	private final AttributeElements pAttribute;
	private final TerminalRule tVERSION_TERMINAL;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public PackageXMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pPackage = new PackageElements();
		this.pTag = new TagElements();
		this.pNameTag = new NameTagElements();
		this.pDeclaredPackageName = new DeclaredPackageNameElements();
		this.pVersionTag = new VersionTagElements();
		this.pDescriptionTag = new DescriptionTagElements();
		this.pMaintainerTag = new MaintainerTagElements();
		this.pLicenseTag = new LicenseTagElements();
		this.pDependencyTag = new DependencyTagElements();
		this.pRunDependencyTag = new RunDependencyTagElements();
		this.pBuildDependDependencyTag = new BuildDependDependencyTagElements();
		this.pExecDependDependencyTag = new ExecDependDependencyTagElements();
		this.pBuildToolDependDependencyTag = new BuildToolDependDependencyTagElements();
		this.pExportTag = new ExportTagElements();
		this.pAuthorTag = new AuthorTagElements();
		this.pUrlTag = new UrlTagElements();
		this.pArbitraryTag = new ArbitraryTagElements();
		this.pAttribute = new AttributeElements();
		this.tVERSION_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.VERSION_TERMINAL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.packagexml.PackageXML.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.spf.packagexml.PackageXML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Package:
	//	"<?" "xml" "version" "=" version=STRING "?>"
	//	"<" 'package' 'format' "=" format=STRING ">"
	//	tags+=Tag*
	//	"<" "/" 'package' ">";
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Tag:
	//	NameTag | VersionTag | DescriptionTag | MaintainerTag | LicenseTag | DependencyTag | ExportTag | AuthorTag | UrlTag |
	//	ArbitraryTag;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	///* GENERAL TAGS */ NameTag:
	//	"<" 'name' ">" declaredPackageName=DeclaredPackageName "<" "/" 'name' ">";
	public NameTagElements getNameTagAccess() {
		return pNameTag;
	}
	
	public ParserRule getNameTagRule() {
		return getNameTagAccess().getRule();
	}
	
	//DeclaredPackageName:
	//	name=ID;
	public DeclaredPackageNameElements getDeclaredPackageNameAccess() {
		return pDeclaredPackageName;
	}
	
	public ParserRule getDeclaredPackageNameRule() {
		return getDeclaredPackageNameAccess().getRule();
	}
	
	//VersionTag:
	//	"<" 'version' ">" version=VERSION_TERMINAL "<" "/" 'version' ">";
	public VersionTagElements getVersionTagAccess() {
		return pVersionTag;
	}
	
	public ParserRule getVersionTagRule() {
		return getVersionTagAccess().getRule();
	}
	
	//DescriptionTag:
	//	{DescriptionTag}
	//	"<" 'description' ">" descriptionText+=(ID | STRING)* "<" "/" "description" ">";
	public DescriptionTagElements getDescriptionTagAccess() {
		return pDescriptionTag;
	}
	
	public ParserRule getDescriptionTagRule() {
		return getDescriptionTagAccess().getRule();
	}
	
	//MaintainerTag:
	//	"<" 'maintainer' 'email' "=" email=STRING ">" maintainerText+=(ID | STRING)* "<" "/" 'maintainer' ">";
	public MaintainerTagElements getMaintainerTagAccess() {
		return pMaintainerTag;
	}
	
	public ParserRule getMaintainerTagRule() {
		return getMaintainerTagAccess().getRule();
	}
	
	//LicenseTag:
	//	"<" 'license' ">" license=ID "<" "/" 'license' ">";
	public LicenseTagElements getLicenseTagAccess() {
		return pLicenseTag;
	}
	
	public ParserRule getLicenseTagRule() {
		return getLicenseTagAccess().getRule();
	}
	
	///* DEPENDENCY TAGS */ DependencyTag Tag:
	//	BuildDependDependencyTag
	//	| ExecDependDependencyTag
	//	| BuildToolDependDependencyTag
	//	| RunDependencyTag;
	public DependencyTagElements getDependencyTagAccess() {
		return pDependencyTag;
	}
	
	public ParserRule getDependencyTagRule() {
		return getDependencyTagAccess().getRule();
	}
	
	//RunDependencyTag DependencyTag:
	//	{RunDependencyTag}
	//	"<" 'run_depend' ">" name=ID "<" "/" 'run_depend' ">";
	public RunDependencyTagElements getRunDependencyTagAccess() {
		return pRunDependencyTag;
	}
	
	public ParserRule getRunDependencyTagRule() {
		return getRunDependencyTagAccess().getRule();
	}
	
	//BuildDependDependencyTag DependencyTag:
	//	{BuildDependDependencyTag}
	//	"<" 'build_depend' ">" name=ID "<" "/" 'build_depend' ">";
	public BuildDependDependencyTagElements getBuildDependDependencyTagAccess() {
		return pBuildDependDependencyTag;
	}
	
	public ParserRule getBuildDependDependencyTagRule() {
		return getBuildDependDependencyTagAccess().getRule();
	}
	
	//ExecDependDependencyTag DependencyTag:
	//	{ExecDependDependencyTag}
	//	"<" 'exec_depend' ">" name=ID "<" "/" 'exec_depend' ">";
	public ExecDependDependencyTagElements getExecDependDependencyTagAccess() {
		return pExecDependDependencyTag;
	}
	
	public ParserRule getExecDependDependencyTagRule() {
		return getExecDependDependencyTagAccess().getRule();
	}
	
	//BuildToolDependDependencyTag DependencyTag:
	//	{BuildToolDependDependencyTag}
	//	"<" 'buildtool_depend' ">" name=ID "<" "/" 'buildtool_depend' ">";
	public BuildToolDependDependencyTagElements getBuildToolDependDependencyTagAccess() {
		return pBuildToolDependDependencyTag;
	}
	
	public ParserRule getBuildToolDependDependencyTagRule() {
		return getBuildToolDependDependencyTagAccess().getRule();
	}
	
	//ExportTag:
	//	{ExportTag}
	//	"<" 'export' ">"
	//	arbitrary_tags+=ArbitraryTag*
	//	"<" "/" 'export' ">";
	public ExportTagElements getExportTagAccess() {
		return pExportTag;
	}
	
	public ParserRule getExportTagRule() {
		return getExportTagAccess().getRule();
	}
	
	//AuthorTag:
	//	{AuthorTag}
	//	"<" 'author' ('email' "=" email=STRING)? ">" authorText+=(ID | STRING)* "<" "/" 'author' ">";
	public AuthorTagElements getAuthorTagAccess() {
		return pAuthorTag;
	}
	
	public ParserRule getAuthorTagRule() {
		return getAuthorTagAccess().getRule();
	}
	
	//UrlTag:
	//	"<" "url" "type" "=" type=STRING ">" url=ID "<" "/" "url" ">";
	public UrlTagElements getUrlTagAccess() {
		return pUrlTag;
	}
	
	public ParserRule getUrlTagRule() {
		return getUrlTagAccess().getRule();
	}
	
	//ArbitraryTag:
	//	"<" name=ID attributes+=Attribute* ("/" ">" | ">" innerText+=(ID | STRING)* "<" "/" ID ">");
	public ArbitraryTagElements getArbitraryTagAccess() {
		return pArbitraryTag;
	}
	
	public ParserRule getArbitraryTagRule() {
		return getArbitraryTagAccess().getRule();
	}
	
	//Attribute:
	//	key=ID "=" value=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal VERSION_TERMINAL:
	//	INT ('.' INT)*;
	public TerminalRule getVERSION_TERMINALRule() {
		return tVERSION_TERMINAL;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '.' | ',' | ':' | '/')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' !'"'* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'<!--' !('\n' | '\r')* '-->' ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
