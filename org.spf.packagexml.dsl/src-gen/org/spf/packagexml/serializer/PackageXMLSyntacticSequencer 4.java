/*
 * generated by Xtext 2.22.0
 */
package org.spf.packagexml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.spf.packagexml.services.PackageXMLGrammarAccess;

@SuppressWarnings("all")
public class PackageXMLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PackageXMLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArbitraryTag___GreaterThanSignKeyword_3_1_0_LessThanSignKeyword_3_1_2_SolidusKeyword_3_1_3_IDTerminalRuleCall_3_1_4_GreaterThanSignKeyword_3_1_5___or___SolidusKeyword_3_0_0_GreaterThanSignKeyword_3_0_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PackageXMLGrammarAccess) access;
		match_ArbitraryTag___GreaterThanSignKeyword_3_1_0_LessThanSignKeyword_3_1_2_SolidusKeyword_3_1_3_IDTerminalRuleCall_3_1_4_GreaterThanSignKeyword_3_1_5___or___SolidusKeyword_3_0_0_GreaterThanSignKeyword_3_0_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getGreaterThanSignKeyword_3_1_0()), new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getLessThanSignKeyword_3_1_2()), new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getSolidusKeyword_3_1_3()), new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getIDTerminalRuleCall_3_1_4()), new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getGreaterThanSignKeyword_3_1_5())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getSolidusKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getArbitraryTagAccess().getGreaterThanSignKeyword_3_0_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID:
	 * 	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '.' | ',' | ':' | '/')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArbitraryTag___GreaterThanSignKeyword_3_1_0_LessThanSignKeyword_3_1_2_SolidusKeyword_3_1_3_IDTerminalRuleCall_3_1_4_GreaterThanSignKeyword_3_1_5___or___SolidusKeyword_3_0_0_GreaterThanSignKeyword_3_0_1__.equals(syntax))
				emit_ArbitraryTag___GreaterThanSignKeyword_3_1_0_LessThanSignKeyword_3_1_2_SolidusKeyword_3_1_3_IDTerminalRuleCall_3_1_4_GreaterThanSignKeyword_3_1_5___or___SolidusKeyword_3_0_0_GreaterThanSignKeyword_3_0_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('/' '>') | ('>' '<' '/' ID '>')
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_ArbitraryTag___GreaterThanSignKeyword_3_1_0_LessThanSignKeyword_3_1_2_SolidusKeyword_3_1_3_IDTerminalRuleCall_3_1_4_GreaterThanSignKeyword_3_1_5___or___SolidusKeyword_3_0_0_GreaterThanSignKeyword_3_0_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
