/*
 * generated by Xtext 2.22.0
 */
package org.spf.packagexml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.spf.PackageXML.ArbitraryTag;
import org.spf.PackageXML.Attribute;
import org.spf.PackageXML.AuthorTag;
import org.spf.PackageXML.BuildDependDependencyTag;
import org.spf.PackageXML.BuildToolDependDependencyTag;
import org.spf.PackageXML.DeclaredPackageName;
import org.spf.PackageXML.DescriptionTag;
import org.spf.PackageXML.ExecDependDependencyTag;
import org.spf.PackageXML.ExportTag;
import org.spf.PackageXML.LicenseTag;
import org.spf.PackageXML.MaintainerTag;
import org.spf.PackageXML.NameTag;
import org.spf.PackageXML.PackageXMLPackage;
import org.spf.PackageXML.RunDependencyTag;
import org.spf.PackageXML.UrlTag;
import org.spf.PackageXML.VersionTag;
import org.spf.packagexml.services.PackageXMLGrammarAccess;

@SuppressWarnings("all")
public class PackageXMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PackageXMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PackageXMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PackageXMLPackage.ARBITRARY_TAG:
				sequence_ArbitraryTag(context, (ArbitraryTag) semanticObject); 
				return; 
			case PackageXMLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case PackageXMLPackage.AUTHOR_TAG:
				sequence_AuthorTag(context, (AuthorTag) semanticObject); 
				return; 
			case PackageXMLPackage.BUILD_DEPEND_DEPENDENCY_TAG:
				sequence_BuildDependDependencyTag(context, (BuildDependDependencyTag) semanticObject); 
				return; 
			case PackageXMLPackage.BUILD_TOOL_DEPEND_DEPENDENCY_TAG:
				sequence_BuildToolDependDependencyTag(context, (BuildToolDependDependencyTag) semanticObject); 
				return; 
			case PackageXMLPackage.DECLARED_PACKAGE_NAME:
				sequence_DeclaredPackageName(context, (DeclaredPackageName) semanticObject); 
				return; 
			case PackageXMLPackage.DESCRIPTION_TAG:
				sequence_DescriptionTag(context, (DescriptionTag) semanticObject); 
				return; 
			case PackageXMLPackage.EXEC_DEPEND_DEPENDENCY_TAG:
				sequence_ExecDependDependencyTag(context, (ExecDependDependencyTag) semanticObject); 
				return; 
			case PackageXMLPackage.EXPORT_TAG:
				sequence_ExportTag(context, (ExportTag) semanticObject); 
				return; 
			case PackageXMLPackage.LICENSE_TAG:
				sequence_LicenseTag(context, (LicenseTag) semanticObject); 
				return; 
			case PackageXMLPackage.MAINTAINER_TAG:
				sequence_MaintainerTag(context, (MaintainerTag) semanticObject); 
				return; 
			case PackageXMLPackage.NAME_TAG:
				sequence_NameTag(context, (NameTag) semanticObject); 
				return; 
			case PackageXMLPackage.PACKAGE:
				sequence_Package(context, (org.spf.PackageXML.Package) semanticObject); 
				return; 
			case PackageXMLPackage.RUN_DEPENDENCY_TAG:
				sequence_RunDependencyTag(context, (RunDependencyTag) semanticObject); 
				return; 
			case PackageXMLPackage.URL_TAG:
				sequence_UrlTag(context, (UrlTag) semanticObject); 
				return; 
			case PackageXMLPackage.VERSION_TAG:
				sequence_VersionTag(context, (VersionTag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Tag returns ArbitraryTag
	 *     ArbitraryTag returns ArbitraryTag
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute* (innerText+=ID | innerText+=STRING)*)
	 */
	protected void sequence_ArbitraryTag(ISerializationContext context, ArbitraryTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (key=ID value=STRING)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.ATTRIBUTE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.ATTRIBUTE__KEY));
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns AuthorTag
	 *     AuthorTag returns AuthorTag
	 *
	 * Constraint:
	 *     (email=STRING? (authorText+=ID | authorText+=STRING)*)
	 */
	protected void sequence_AuthorTag(ISerializationContext context, AuthorTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns BuildDependDependencyTag
	 *     DependencyTag returns BuildDependDependencyTag
	 *     BuildDependDependencyTag returns BuildDependDependencyTag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BuildDependDependencyTag(ISerializationContext context, BuildDependDependencyTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.BUILD_DEPEND_DEPENDENCY_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.BUILD_DEPEND_DEPENDENCY_TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBuildDependDependencyTagAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns BuildToolDependDependencyTag
	 *     DependencyTag returns BuildToolDependDependencyTag
	 *     BuildToolDependDependencyTag returns BuildToolDependDependencyTag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BuildToolDependDependencyTag(ISerializationContext context, BuildToolDependDependencyTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.BUILD_TOOL_DEPEND_DEPENDENCY_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.BUILD_TOOL_DEPEND_DEPENDENCY_TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBuildToolDependDependencyTagAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeclaredPackageName returns DeclaredPackageName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DeclaredPackageName(ISerializationContext context, DeclaredPackageName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.DECLARED_PACKAGE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.DECLARED_PACKAGE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaredPackageNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns DescriptionTag
	 *     DescriptionTag returns DescriptionTag
	 *
	 * Constraint:
	 *     (descriptionText+=ID | descriptionText+=STRING)*
	 */
	protected void sequence_DescriptionTag(ISerializationContext context, DescriptionTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns ExecDependDependencyTag
	 *     DependencyTag returns ExecDependDependencyTag
	 *     ExecDependDependencyTag returns ExecDependDependencyTag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExecDependDependencyTag(ISerializationContext context, ExecDependDependencyTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.EXEC_DEPEND_DEPENDENCY_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.EXEC_DEPEND_DEPENDENCY_TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecDependDependencyTagAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns ExportTag
	 *     ExportTag returns ExportTag
	 *
	 * Constraint:
	 *     arbitrary_tags+=ArbitraryTag*
	 */
	protected void sequence_ExportTag(ISerializationContext context, ExportTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns LicenseTag
	 *     LicenseTag returns LicenseTag
	 *
	 * Constraint:
	 *     license=ID
	 */
	protected void sequence_LicenseTag(ISerializationContext context, LicenseTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.LICENSE_TAG__LICENSE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.LICENSE_TAG__LICENSE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLicenseTagAccess().getLicenseIDTerminalRuleCall_3_0(), semanticObject.getLicense());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns MaintainerTag
	 *     MaintainerTag returns MaintainerTag
	 *
	 * Constraint:
	 *     (email=STRING (maintainerText+=ID | maintainerText+=STRING)*)
	 */
	protected void sequence_MaintainerTag(ISerializationContext context, MaintainerTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns NameTag
	 *     NameTag returns NameTag
	 *
	 * Constraint:
	 *     declaredPackageName=DeclaredPackageName
	 */
	protected void sequence_NameTag(ISerializationContext context, NameTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.NAME_TAG__DECLARED_PACKAGE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.NAME_TAG__DECLARED_PACKAGE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameTagAccess().getDeclaredPackageNameDeclaredPackageNameParserRuleCall_3_0(), semanticObject.getDeclaredPackageName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (version=STRING format=STRING tags+=Tag*)
	 */
	protected void sequence_Package(ISerializationContext context, org.spf.PackageXML.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns RunDependencyTag
	 *     DependencyTag returns RunDependencyTag
	 *     RunDependencyTag returns RunDependencyTag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RunDependencyTag(ISerializationContext context, RunDependencyTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.RUN_DEPENDENCY_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.RUN_DEPENDENCY_TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunDependencyTagAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns UrlTag
	 *     UrlTag returns UrlTag
	 *
	 * Constraint:
	 *     (type=STRING url=ID)
	 */
	protected void sequence_UrlTag(ISerializationContext context, UrlTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.URL_TAG__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.URL_TAG__TYPE));
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.URL_TAG__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.URL_TAG__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUrlTagAccess().getTypeSTRINGTerminalRuleCall_4_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getUrlTagAccess().getUrlIDTerminalRuleCall_6_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns VersionTag
	 *     VersionTag returns VersionTag
	 *
	 * Constraint:
	 *     version=VERSION_TERMINAL
	 */
	protected void sequence_VersionTag(ISerializationContext context, VersionTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PackageXMLPackage.Literals.VERSION_TAG__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PackageXMLPackage.Literals.VERSION_TAG__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVersionTagAccess().getVersionVERSION_TERMINALTerminalRuleCall_3_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
}
