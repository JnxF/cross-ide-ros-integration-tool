// automatically generated by Xtext
grammar org.spf.packagexml.PackageXML hidden(ML_COMMENT, SL_COMMENT, WS)

import "http://spf.org/packagexml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Package returns Package:
	"<?" "xml" "version" "=" version=STRING "?>"
	"<" 'package' 'format' "=" format=STRING ">"
	tags+=Tag*
	"<" "/" 'package' ">";

Tag returns Tag:
	NameTag |
	VersionTag |
	DescriptionTag |
	MaintainerTag |
	LicenseTag |
	DependencyTag |
	ExportTag |
	AuthorTag |
	UrlTag |
	ArbitraryTag;

/* GENERAL TAGS */
NameTag returns NameTag:
	"<" 'name' ">" declaredPackageName=DeclaredPackageName "<" "/" 'name' ">";

DeclaredPackageName returns DeclaredPackageName:
	name=ID;

VersionTag returns VersionTag:
	"<" 'version' ">" version=VERSION_TERMINAL "<" "/" 'version' ">";

DescriptionTag returns DescriptionTag:
	{DescriptionTag}
	"<" 'description' ">" (descriptionText+=(ID | STRING))* "<" "/" "description" ">";

MaintainerTag returns MaintainerTag:
	"<" 'maintainer' 'email' "=" email=STRING ">" (maintainerText+=(ID | STRING))* "<" "/" 'maintainer' ">";

LicenseTag returns LicenseTag:
	"<" 'license' ">" license=ID "<" "/" 'license' ">";

/* DEPENDENCY TAGS */
DependencyTag returns Tag:
	BuildDependDependencyTag
	| ExecDependDependencyTag
	| BuildToolDependDependencyTag
	| RunDependencyTag;

RunDependencyTag returns DependencyTag:
	{RunDependencyTag}
	"<" 'run_depend' ">" name=ID "<" "/" 'run_depend' ">";

BuildDependDependencyTag returns DependencyTag:
	{BuildDependDependencyTag}
	"<" 'build_depend' ">" name=ID "<" "/" 'build_depend' ">";

ExecDependDependencyTag returns DependencyTag:
	{ExecDependDependencyTag}
	"<" 'exec_depend' ">" name=ID "<" "/" 'exec_depend' ">";

BuildToolDependDependencyTag returns DependencyTag:
	{BuildToolDependDependencyTag}
	"<" 'buildtool_depend' ">" name=ID "<" "/" 'buildtool_depend' ">";

ExportTag returns ExportTag:
	{ExportTag}
	"<" 'export' ">"
	arbitrary_tags+=ArbitraryTag*
	"<" "/" 'export' ">";

AuthorTag returns AuthorTag:
	{AuthorTag}
	"<" 'author' ('email' "=" email=STRING)? ">" (authorText+=(ID | STRING))* "<" "/" 'author' ">";

UrlTag returns UrlTag:
	"<" "url" "type" "=" type=STRING ">" url=ID "<" "/" "url" ">";

ArbitraryTag returns ArbitraryTag:
	"<" name=ID (attributes+=Attribute)* ("/" ">" | ">" (innerText+=(ID | STRING))* "<" "/" ID ">");

Attribute returns Attribute:
	key=ID "=" value=STRING;

terminal VERSION_TERMINAL:
	INT ('.' INT)*;

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9' | '.' | ',' | ':' | '/')*;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal STRING:
	'"' !('"')* '"';

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'<!--' !('\n' | '\r')* '-->' ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;