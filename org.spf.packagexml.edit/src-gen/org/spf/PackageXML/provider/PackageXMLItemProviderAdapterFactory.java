/**
 */
package org.spf.PackageXML.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.spf.PackageXML.util.PackageXMLAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PackageXMLItemProviderAdapterFactory extends PackageXMLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PackageXMLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.Package} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageItemProvider packageItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.Package}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageAdapter() {
		if (packageItemProvider == null) {
			packageItemProvider = new PackageItemProvider(this);
		}

		return packageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.NameTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTagItemProvider nameTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.NameTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameTagAdapter() {
		if (nameTagItemProvider == null) {
			nameTagItemProvider = new NameTagItemProvider(this);
		}

		return nameTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.DeclaredPackageName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclaredPackageNameItemProvider declaredPackageNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.DeclaredPackageName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclaredPackageNameAdapter() {
		if (declaredPackageNameItemProvider == null) {
			declaredPackageNameItemProvider = new DeclaredPackageNameItemProvider(this);
		}

		return declaredPackageNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.VersionTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VersionTagItemProvider versionTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.VersionTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVersionTagAdapter() {
		if (versionTagItemProvider == null) {
			versionTagItemProvider = new VersionTagItemProvider(this);
		}

		return versionTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.DescriptionTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionTagItemProvider descriptionTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.DescriptionTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionTagAdapter() {
		if (descriptionTagItemProvider == null) {
			descriptionTagItemProvider = new DescriptionTagItemProvider(this);
		}

		return descriptionTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.MaintainerTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintainerTagItemProvider maintainerTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.MaintainerTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintainerTagAdapter() {
		if (maintainerTagItemProvider == null) {
			maintainerTagItemProvider = new MaintainerTagItemProvider(this);
		}

		return maintainerTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.LicenseTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LicenseTagItemProvider licenseTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.LicenseTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLicenseTagAdapter() {
		if (licenseTagItemProvider == null) {
			licenseTagItemProvider = new LicenseTagItemProvider(this);
		}

		return licenseTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.AuthorTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorTagItemProvider authorTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.AuthorTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorTagAdapter() {
		if (authorTagItemProvider == null) {
			authorTagItemProvider = new AuthorTagItemProvider(this);
		}

		return authorTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.UrlTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrlTagItemProvider urlTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.UrlTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUrlTagAdapter() {
		if (urlTagItemProvider == null) {
			urlTagItemProvider = new UrlTagItemProvider(this);
		}

		return urlTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.RunDependencyTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunDependencyTagItemProvider runDependencyTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.RunDependencyTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunDependencyTagAdapter() {
		if (runDependencyTagItemProvider == null) {
			runDependencyTagItemProvider = new RunDependencyTagItemProvider(this);
		}

		return runDependencyTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.BuildDependDependencyTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildDependDependencyTagItemProvider buildDependDependencyTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.BuildDependDependencyTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildDependDependencyTagAdapter() {
		if (buildDependDependencyTagItemProvider == null) {
			buildDependDependencyTagItemProvider = new BuildDependDependencyTagItemProvider(this);
		}

		return buildDependDependencyTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.ExecDependDependencyTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecDependDependencyTagItemProvider execDependDependencyTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.ExecDependDependencyTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecDependDependencyTagAdapter() {
		if (execDependDependencyTagItemProvider == null) {
			execDependDependencyTagItemProvider = new ExecDependDependencyTagItemProvider(this);
		}

		return execDependDependencyTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.BuildToolDependDependencyTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildToolDependDependencyTagItemProvider buildToolDependDependencyTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.BuildToolDependDependencyTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildToolDependDependencyTagAdapter() {
		if (buildToolDependDependencyTagItemProvider == null) {
			buildToolDependDependencyTagItemProvider = new BuildToolDependDependencyTagItemProvider(this);
		}

		return buildToolDependDependencyTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.ExportTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportTagItemProvider exportTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.ExportTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportTagAdapter() {
		if (exportTagItemProvider == null) {
			exportTagItemProvider = new ExportTagItemProvider(this);
		}

		return exportTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.ArbitraryTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArbitraryTagItemProvider arbitraryTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.ArbitraryTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArbitraryTagAdapter() {
		if (arbitraryTagItemProvider == null) {
			arbitraryTagItemProvider = new ArbitraryTagItemProvider(this);
		}

		return arbitraryTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.PackageXML.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.PackageXML.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (packageItemProvider != null) packageItemProvider.dispose();
		if (nameTagItemProvider != null) nameTagItemProvider.dispose();
		if (declaredPackageNameItemProvider != null) declaredPackageNameItemProvider.dispose();
		if (versionTagItemProvider != null) versionTagItemProvider.dispose();
		if (descriptionTagItemProvider != null) descriptionTagItemProvider.dispose();
		if (maintainerTagItemProvider != null) maintainerTagItemProvider.dispose();
		if (licenseTagItemProvider != null) licenseTagItemProvider.dispose();
		if (authorTagItemProvider != null) authorTagItemProvider.dispose();
		if (urlTagItemProvider != null) urlTagItemProvider.dispose();
		if (runDependencyTagItemProvider != null) runDependencyTagItemProvider.dispose();
		if (buildDependDependencyTagItemProvider != null) buildDependDependencyTagItemProvider.dispose();
		if (execDependDependencyTagItemProvider != null) execDependDependencyTagItemProvider.dispose();
		if (buildToolDependDependencyTagItemProvider != null) buildToolDependDependencyTagItemProvider.dispose();
		if (exportTagItemProvider != null) exportTagItemProvider.dispose();
		if (arbitraryTagItemProvider != null) arbitraryTagItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
	}

}
