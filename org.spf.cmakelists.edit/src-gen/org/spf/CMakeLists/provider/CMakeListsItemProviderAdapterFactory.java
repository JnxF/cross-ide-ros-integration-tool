/**
 */
package org.spf.CMakeLists.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.spf.CMakeLists.util.CMakeListsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CMakeListsItemProviderAdapterFactory extends CMakeListsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CMakeListsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.CMakeListsFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMakeListsFileItemProvider cMakeListsFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.CMakeListsFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCMakeListsFileAdapter() {
		if (cMakeListsFileItemProvider == null) {
			cMakeListsFileItemProvider = new CMakeListsFileItemProvider(this);
		}

		return cMakeListsFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.CMakeMinimumRequired} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMakeMinimumRequiredItemProvider cMakeMinimumRequiredItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.CMakeMinimumRequired}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCMakeMinimumRequiredAdapter() {
		if (cMakeMinimumRequiredItemProvider == null) {
			cMakeMinimumRequiredItemProvider = new CMakeMinimumRequiredItemProvider(this);
		}

		return cMakeMinimumRequiredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.ProjectInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectInstructionItemProvider projectInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.ProjectInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectInstructionAdapter() {
		if (projectInstructionItemProvider == null) {
			projectInstructionItemProvider = new ProjectInstructionItemProvider(this);
		}

		return projectInstructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.FindPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FindPackageItemProvider findPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.FindPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFindPackageAdapter() {
		if (findPackageItemProvider == null) {
			findPackageItemProvider = new FindPackageItemProvider(this);
		}

		return findPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.AddExecutable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddExecutableItemProvider addExecutableItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.AddExecutable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddExecutableAdapter() {
		if (addExecutableItemProvider == null) {
			addExecutableItemProvider = new AddExecutableItemProvider(this);
		}

		return addExecutableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.Executable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutableItemProvider executableItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.Executable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutableAdapter() {
		if (executableItemProvider == null) {
			executableItemProvider = new ExecutableItemProvider(this);
		}

		return executableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.AmentTargetDependencies} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AmentTargetDependenciesItemProvider amentTargetDependenciesItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.AmentTargetDependencies}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmentTargetDependenciesAdapter() {
		if (amentTargetDependenciesItemProvider == null) {
			amentTargetDependenciesItemProvider = new AmentTargetDependenciesItemProvider(this);
		}

		return amentTargetDependenciesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.AmentPackageInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AmentPackageInstructionItemProvider amentPackageInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.AmentPackageInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmentPackageInstructionAdapter() {
		if (amentPackageInstructionItemProvider == null) {
			amentPackageInstructionItemProvider = new AmentPackageInstructionItemProvider(this);
		}

		return amentPackageInstructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.InstallTargets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstallTargetsItemProvider installTargetsItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.InstallTargets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstallTargetsAdapter() {
		if (installTargetsItemProvider == null) {
			installTargetsItemProvider = new InstallTargetsItemProvider(this);
		}

		return installTargetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.InstallDirectory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstallDirectoryItemProvider installDirectoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.InstallDirectory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstallDirectoryAdapter() {
		if (installDirectoryItemProvider == null) {
			installDirectoryItemProvider = new InstallDirectoryItemProvider(this);
		}

		return installDirectoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.IfInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfInstructionItemProvider ifInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.IfInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfInstructionAdapter() {
		if (ifInstructionItemProvider == null) {
			ifInstructionItemProvider = new IfInstructionItemProvider(this);
		}

		return ifInstructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.SetInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetInstructionItemProvider setInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.SetInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetInstructionAdapter() {
		if (setInstructionItemProvider == null) {
			setInstructionItemProvider = new SetInstructionItemProvider(this);
		}

		return setInstructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.AddCompileOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddCompileOptionsItemProvider addCompileOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.AddCompileOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddCompileOptionsAdapter() {
		if (addCompileOptionsItemProvider == null) {
			addCompileOptionsItemProvider = new AddCompileOptionsItemProvider(this);
		}

		return addCompileOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.spf.CMakeLists.UndefinedInstruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndefinedInstructionItemProvider undefinedInstructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.spf.CMakeLists.UndefinedInstruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndefinedInstructionAdapter() {
		if (undefinedInstructionItemProvider == null) {
			undefinedInstructionItemProvider = new UndefinedInstructionItemProvider(this);
		}

		return undefinedInstructionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (cMakeListsFileItemProvider != null) cMakeListsFileItemProvider.dispose();
		if (cMakeMinimumRequiredItemProvider != null) cMakeMinimumRequiredItemProvider.dispose();
		if (projectInstructionItemProvider != null) projectInstructionItemProvider.dispose();
		if (findPackageItemProvider != null) findPackageItemProvider.dispose();
		if (addExecutableItemProvider != null) addExecutableItemProvider.dispose();
		if (executableItemProvider != null) executableItemProvider.dispose();
		if (amentTargetDependenciesItemProvider != null) amentTargetDependenciesItemProvider.dispose();
		if (amentPackageInstructionItemProvider != null) amentPackageInstructionItemProvider.dispose();
		if (installTargetsItemProvider != null) installTargetsItemProvider.dispose();
		if (installDirectoryItemProvider != null) installDirectoryItemProvider.dispose();
		if (ifInstructionItemProvider != null) ifInstructionItemProvider.dispose();
		if (setInstructionItemProvider != null) setInstructionItemProvider.dispose();
		if (addCompileOptionsItemProvider != null) addCompileOptionsItemProvider.dispose();
		if (undefinedInstructionItemProvider != null) undefinedInstructionItemProvider.dispose();
	}

}
