/*
 * generated by Xtext 2.21.0
 */
package org.spf.launchfile.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.spf.LaunchFile.Function;
import org.spf.LaunchFile.ImportStatement;
import org.spf.LaunchFile.LaunchDescription;
import org.spf.LaunchFile.LaunchFilePackage;
import org.spf.LaunchFile.Node;
import org.spf.LaunchFile.PythonFile;
import org.spf.LaunchFile.ReturnStatement;
import org.spf.launchfile.dsl.services.LaunchFileGrammarAccess;

@SuppressWarnings("all")
public class LaunchFileSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LaunchFileGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LaunchFilePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LaunchFilePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case LaunchFilePackage.IMPORT_STATEMENT:
				sequence_ImportStatement(context, (ImportStatement) semanticObject); 
				return; 
			case LaunchFilePackage.LAUNCH_DESCRIPTION:
				sequence_LaunchDescription(context, (LaunchDescription) semanticObject); 
				return; 
			case LaunchFilePackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			case LaunchFilePackage.PARAMETER:
				sequence_Parameter(context, (org.spf.LaunchFile.Parameter) semanticObject); 
				return; 
			case LaunchFilePackage.PYTHON_FILE:
				sequence_PythonFile(context, (PythonFile) semanticObject); 
				return; 
			case LaunchFilePackage.RETURN_STATEMENT:
				sequence_ReturnStatement(context, (ReturnStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PythonInstruction returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID body+=PythonInstruction* body+=ReturnStatement?)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PythonInstruction returns ImportStatement
	 *     ImportStatement returns ImportStatement
	 *
	 * Constraint:
	 *     (
	 *         (from=ID | from=FromString)? 
	 *         (imports+=FromString | imports+='LaunchDescription' | imports+='Node') 
	 *         imports+=FromString? 
	 *         ((imports+='LaunchDescription' | imports+='Node')? imports+=FromString?)*
	 *     )
	 */
	protected void sequence_ImportStatement(ISerializationContext context, ImportStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LaunchDescription returns LaunchDescription
	 *
	 * Constraint:
	 *     (nodes+=Node nodes+=Node*)
	 */
	protected void sequence_LaunchDescription(ISerializationContext context, LaunchDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (
	 *         (node_name=STRING | package_name=STRING | namespace=STRING | node_executable=STRING | output=STRING)? 
	 *         (parameters+=Parameter parameters+=Parameter*)?
	 *     )+
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=STRING value=STRING)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.spf.LaunchFile.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LaunchFilePackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LaunchFilePackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, LaunchFilePackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LaunchFilePackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameSTRINGTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PythonFile returns PythonFile
	 *
	 * Constraint:
	 *     instructions+=PythonInstruction+
	 */
	protected void sequence_PythonFile(ISerializationContext context, PythonFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnStatement returns ReturnStatement
	 *
	 * Constraint:
	 *     launchDescription=LaunchDescription
	 */
	protected void sequence_ReturnStatement(ISerializationContext context, ReturnStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LaunchFilePackage.Literals.RETURN_STATEMENT__LAUNCH_DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LaunchFilePackage.Literals.RETURN_STATEMENT__LAUNCH_DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnStatementAccess().getLaunchDescriptionLaunchDescriptionParserRuleCall_1_0(), semanticObject.getLaunchDescription());
		feeder.finish();
	}
	
	
}
