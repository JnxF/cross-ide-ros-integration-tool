/*
 * generated by Xtext 2.21.0
 */
package org.spf.launchfile.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.spf.launchfile.dsl.services.LaunchFileGrammarAccess;

@SuppressWarnings("all")
public class LaunchFileSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LaunchFileGrammarAccess grammarAccess;
	protected AbstractElementAlias match_LaunchDescription_CommaKeyword_6_q;
	protected AbstractElementAlias match_Node_Launch_rosActionsNodeKeyword_1_1_or_NodeKeyword_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LaunchFileGrammarAccess) access;
		match_LaunchDescription_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getLaunchDescriptionAccess().getCommaKeyword_6());
		match_Node_Launch_rosActionsNodeKeyword_1_1_or_NodeKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNodeAccess().getLaunch_rosActionsNodeKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getNodeAccess().getNodeKeyword_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_LaunchDescription_CommaKeyword_6_q.equals(syntax))
				emit_LaunchDescription_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Node_Launch_rosActionsNodeKeyword_1_1_or_NodeKeyword_1_0.equals(syntax))
				emit_Node_Launch_rosActionsNodeKeyword_1_1_or_NodeKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     nodes+=Node (ambiguity) ']' ')' (rule end)
	 */
	protected void emit_LaunchDescription_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Node' | 'launch_ros.actions.Node'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ')' (rule start)
	 *     (rule start) (ambiguity) '(' 'namespace' '=' namespace=STRING
	 *     (rule start) (ambiguity) '(' 'node_executable' '=' node_executable=STRING
	 *     (rule start) (ambiguity) '(' 'node_name' '=' node_name=STRING
	 *     (rule start) (ambiguity) '(' 'output' '=' output=STRING
	 *     (rule start) (ambiguity) '(' 'package' '=' package_name=STRING
	 *     (rule start) (ambiguity) '(' 'parameters' '=' '[{' parameters+=Parameter
	 */
	protected void emit_Node_Launch_rosActionsNodeKeyword_1_1_or_NodeKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
