/*
 * generated by Xtext 2.21.0
 */
package org.spf.launchfile.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LaunchFileGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PythonFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.PythonFile");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsPythonInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//PythonFile:
		//	instructions+=PythonInstruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instructions+=PythonInstruction*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }
		
		//PythonInstruction
		public RuleCall getInstructionsPythonInstructionParserRuleCall_0() { return cInstructionsPythonInstructionParserRuleCall_0; }
	}
	public class PythonInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.PythonInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PythonInstruction:
		//	ImportStatement | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//ImportStatement | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ImportStatement
		public RuleCall getImportStatementParserRuleCall_0() { return cImportStatementParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFromAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cFromAlternatives_0_1_0 = (Alternatives)cFromAssignment_0_1.eContents().get(0);
		private final RuleCall cFromIDTerminalRuleCall_0_1_0_0 = (RuleCall)cFromAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cFromFromStringParserRuleCall_0_1_0_1 = (RuleCall)cFromAlternatives_0_1_0.eContents().get(1);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cImportsAlternatives_2_0 = (Alternatives)cImportsAssignment_2.eContents().get(0);
		private final RuleCall cImportsFromStringParserRuleCall_2_0_0 = (RuleCall)cImportsAlternatives_2_0.eContents().get(0);
		private final Keyword cImportsLaunchDescriptionKeyword_2_0_1 = (Keyword)cImportsAlternatives_2_0.eContents().get(1);
		private final Keyword cImportsNodeKeyword_2_0_2 = (Keyword)cImportsAlternatives_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cImportsAlternatives_3_1_0 = (Alternatives)cImportsAssignment_3_1.eContents().get(0);
		private final RuleCall cImportsFromStringParserRuleCall_3_1_0_0 = (RuleCall)cImportsAlternatives_3_1_0.eContents().get(0);
		private final Keyword cImportsLaunchDescriptionKeyword_3_1_0_1 = (Keyword)cImportsAlternatives_3_1_0.eContents().get(1);
		private final Keyword cImportsNodeKeyword_3_1_0_2 = (Keyword)cImportsAlternatives_3_1_0.eContents().get(2);
		
		//ImportStatement:
		//	('from' from=(ID | FromString))?
		//	'import' imports+=(FromString | "LaunchDescription" | "Node") ("," imports+=(FromString | "LaunchDescription" |
		//	"Node"))*;
		@Override public ParserRule getRule() { return rule; }
		
		//('from' from=(ID | FromString))? 'import' imports+=(FromString | "LaunchDescription" | "Node") ("," imports+=(FromString
		//| "LaunchDescription" | "Node"))*
		public Group getGroup() { return cGroup; }
		
		//('from' from=(ID | FromString))?
		public Group getGroup_0() { return cGroup_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0() { return cFromKeyword_0_0; }
		
		//from=(ID | FromString)
		public Assignment getFromAssignment_0_1() { return cFromAssignment_0_1; }
		
		//(ID | FromString)
		public Alternatives getFromAlternatives_0_1_0() { return cFromAlternatives_0_1_0; }
		
		//ID
		public RuleCall getFromIDTerminalRuleCall_0_1_0_0() { return cFromIDTerminalRuleCall_0_1_0_0; }
		
		//FromString
		public RuleCall getFromFromStringParserRuleCall_0_1_0_1() { return cFromFromStringParserRuleCall_0_1_0_1; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//imports+=(FromString | "LaunchDescription" | "Node")
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//(FromString | "LaunchDescription" | "Node")
		public Alternatives getImportsAlternatives_2_0() { return cImportsAlternatives_2_0; }
		
		//FromString
		public RuleCall getImportsFromStringParserRuleCall_2_0_0() { return cImportsFromStringParserRuleCall_2_0_0; }
		
		//"LaunchDescription"
		public Keyword getImportsLaunchDescriptionKeyword_2_0_1() { return cImportsLaunchDescriptionKeyword_2_0_1; }
		
		//"Node"
		public Keyword getImportsNodeKeyword_2_0_2() { return cImportsNodeKeyword_2_0_2; }
		
		//("," imports+=(FromString | "LaunchDescription" | "Node"))*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//imports+=(FromString | "LaunchDescription" | "Node")
		public Assignment getImportsAssignment_3_1() { return cImportsAssignment_3_1; }
		
		//(FromString | "LaunchDescription" | "Node")
		public Alternatives getImportsAlternatives_3_1_0() { return cImportsAlternatives_3_1_0; }
		
		//FromString
		public RuleCall getImportsFromStringParserRuleCall_3_1_0_0() { return cImportsFromStringParserRuleCall_3_1_0_0; }
		
		//"LaunchDescription"
		public Keyword getImportsLaunchDescriptionKeyword_3_1_0_1() { return cImportsLaunchDescriptionKeyword_3_1_0_1; }
		
		//"Node"
		public Keyword getImportsNodeKeyword_3_1_0_2() { return cImportsNodeKeyword_3_1_0_2; }
	}
	public class FromStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.FromString");
		private final RuleCall cDOTTED_PARAMTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FromString:
		//	DOTTED_PARAM;
		@Override public ParserRule getRule() { return rule; }
		
		//DOTTED_PARAM
		public RuleCall getDOTTED_PARAMTerminalRuleCall() { return cDOTTED_PARAMTerminalRuleCall; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyPythonInstructionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyReturnStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Function:
		//	"def" name=ID "(" ")" ":"
		//	body+=PythonInstruction*
		//	body+=ReturnStatement?;
		@Override public ParserRule getRule() { return rule; }
		
		//"def" name=ID "(" ")" ":" body+=PythonInstruction* body+=ReturnStatement?
		public Group getGroup() { return cGroup; }
		
		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//body+=PythonInstruction*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//PythonInstruction
		public RuleCall getBodyPythonInstructionParserRuleCall_5_0() { return cBodyPythonInstructionParserRuleCall_5_0; }
		
		//body+=ReturnStatement?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//ReturnStatement
		public RuleCall getBodyReturnStatementParserRuleCall_6_0() { return cBodyReturnStatementParserRuleCall_6_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLaunchDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLaunchDescriptionLaunchDescriptionParserRuleCall_1_0 = (RuleCall)cLaunchDescriptionAssignment_1.eContents().get(0);
		
		//ReturnStatement:
		//	"return" launchDescription=LaunchDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" launchDescription=LaunchDescription
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//launchDescription=LaunchDescription
		public Assignment getLaunchDescriptionAssignment_1() { return cLaunchDescriptionAssignment_1; }
		
		//LaunchDescription
		public RuleCall getLaunchDescriptionLaunchDescriptionParserRuleCall_1_0() { return cLaunchDescriptionLaunchDescriptionParserRuleCall_1_0; }
	}
	public class LaunchDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.LaunchDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLaunchDescriptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLaunchDescriptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesNodeParserRuleCall_4_0 = (RuleCall)cNodesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNodesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_5_1_0 = (RuleCall)cNodesAssignment_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LaunchDescription:
		//	{LaunchDescription}
		//	'LaunchDescription'
		//	'(' "["
		//	nodes+=Node ("," nodes+=Node)* ","?
		//	"]" ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{LaunchDescription} 'LaunchDescription' '(' "[" nodes+=Node ("," nodes+=Node)* ","? "]" ')'
		public Group getGroup() { return cGroup; }
		
		//{LaunchDescription}
		public Action getLaunchDescriptionAction_0() { return cLaunchDescriptionAction_0; }
		
		//'LaunchDescription'
		public Keyword getLaunchDescriptionKeyword_1() { return cLaunchDescriptionKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_4() { return cNodesAssignment_4; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_4_0() { return cNodesNodeParserRuleCall_4_0; }
		
		//("," nodes+=Node)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//nodes+=Node
		public Assignment getNodesAssignment_5_1() { return cNodesAssignment_5_1; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_5_1_0() { return cNodesNodeParserRuleCall_5_1_0; }
		
		//","?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNodeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLaunch_rosActionsNodeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cNode_nameKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cNode_nameAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cNode_nameSTRINGTerminalRuleCall_3_0_2_0 = (RuleCall)cNode_nameAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPackageKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cPackage_nameAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cPackage_nameSTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cPackage_nameAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cNamespaceKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cNamespaceAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cNamespaceSTRINGTerminalRuleCall_3_2_2_0 = (RuleCall)cNamespaceAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cNode_executableKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cNode_executableAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cNode_executableSTRINGTerminalRuleCall_3_3_2_0 = (RuleCall)cNode_executableAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cOutputKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cOutputAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cOutputSTRINGTerminalRuleCall_3_4_2_0 = (RuleCall)cOutputAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cParametersKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftCurlyBracketKeyword_3_5_2 = (Keyword)cGroup_3_5.eContents().get(2);
		private final Assignment cParametersAssignment_3_5_3 = (Assignment)cGroup_3_5.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_5_3_0 = (RuleCall)cParametersAssignment_3_5_3.eContents().get(0);
		private final Group cGroup_3_5_4 = (Group)cGroup_3_5.eContents().get(4);
		private final Keyword cCommaKeyword_3_5_4_0 = (Keyword)cGroup_3_5_4.eContents().get(0);
		private final Assignment cParametersAssignment_3_5_4_1 = (Assignment)cGroup_3_5_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_5_4_1_0 = (RuleCall)cParametersAssignment_3_5_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketRightSquareBracketKeyword_3_5_5 = (Keyword)cGroup_3_5.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Node:
		//	{Node} ("Node" | "launch_ros.actions.Node")
		//	'(' (('node_name' "=" node_name=STRING)? & 'package' "=" package_name=STRING & ('namespace' "=" namespace=STRING)? &
		//	'node_executable' "=" node_executable=STRING & ('output' "=" output=STRING)? & 'parameters' "=" "[{"
		//	parameters+=Parameter ("," parameters+=Parameter)* "}]")?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Node} ("Node" | "launch_ros.actions.Node") '(' (('node_name' "=" node_name=STRING)? & 'package' "=" package_name=STRING
		//& ('namespace' "=" namespace=STRING)? & 'node_executable' "=" node_executable=STRING & ('output' "=" output=STRING)? &
		//'parameters' "=" "[{" parameters+=Parameter ("," parameters+=Parameter)* "}]")? ')'
		public Group getGroup() { return cGroup; }
		
		//{Node}
		public Action getNodeAction_0() { return cNodeAction_0; }
		
		//("Node" | "launch_ros.actions.Node")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"Node"
		public Keyword getNodeKeyword_1_0() { return cNodeKeyword_1_0; }
		
		//"launch_ros.actions.Node"
		public Keyword getLaunch_rosActionsNodeKeyword_1_1() { return cLaunch_rosActionsNodeKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(('node_name' "=" node_name=STRING)? & 'package' "=" package_name=STRING & ('namespace' "=" namespace=STRING)? &
		//'node_executable' "=" node_executable=STRING & ('output' "=" output=STRING)? & 'parameters' "=" "[{"
		//parameters+=Parameter ("," parameters+=Parameter)* "}]")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('node_name' "=" node_name=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'node_name'
		public Keyword getNode_nameKeyword_3_0_0() { return cNode_nameKeyword_3_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_0_1() { return cEqualsSignKeyword_3_0_1; }
		
		//node_name=STRING
		public Assignment getNode_nameAssignment_3_0_2() { return cNode_nameAssignment_3_0_2; }
		
		//STRING
		public RuleCall getNode_nameSTRINGTerminalRuleCall_3_0_2_0() { return cNode_nameSTRINGTerminalRuleCall_3_0_2_0; }
		
		//'package' "=" package_name=STRING
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'package'
		public Keyword getPackageKeyword_3_1_0() { return cPackageKeyword_3_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//package_name=STRING
		public Assignment getPackage_nameAssignment_3_1_2() { return cPackage_nameAssignment_3_1_2; }
		
		//STRING
		public RuleCall getPackage_nameSTRINGTerminalRuleCall_3_1_2_0() { return cPackage_nameSTRINGTerminalRuleCall_3_1_2_0; }
		
		//('namespace' "=" namespace=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_3_2_0() { return cNamespaceKeyword_3_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_2_1() { return cEqualsSignKeyword_3_2_1; }
		
		//namespace=STRING
		public Assignment getNamespaceAssignment_3_2_2() { return cNamespaceAssignment_3_2_2; }
		
		//STRING
		public RuleCall getNamespaceSTRINGTerminalRuleCall_3_2_2_0() { return cNamespaceSTRINGTerminalRuleCall_3_2_2_0; }
		
		//'node_executable' "=" node_executable=STRING
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'node_executable'
		public Keyword getNode_executableKeyword_3_3_0() { return cNode_executableKeyword_3_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_3_1() { return cEqualsSignKeyword_3_3_1; }
		
		//node_executable=STRING
		public Assignment getNode_executableAssignment_3_3_2() { return cNode_executableAssignment_3_3_2; }
		
		//STRING
		public RuleCall getNode_executableSTRINGTerminalRuleCall_3_3_2_0() { return cNode_executableSTRINGTerminalRuleCall_3_3_2_0; }
		
		//('output' "=" output=STRING)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'output'
		public Keyword getOutputKeyword_3_4_0() { return cOutputKeyword_3_4_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_4_1() { return cEqualsSignKeyword_3_4_1; }
		
		//output=STRING
		public Assignment getOutputAssignment_3_4_2() { return cOutputAssignment_3_4_2; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_3_4_2_0() { return cOutputSTRINGTerminalRuleCall_3_4_2_0; }
		
		//'parameters' "=" "[{" parameters+=Parameter ("," parameters+=Parameter)* "}]"
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'parameters'
		public Keyword getParametersKeyword_3_5_0() { return cParametersKeyword_3_5_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_5_1() { return cEqualsSignKeyword_3_5_1; }
		
		//"[{"
		public Keyword getLeftSquareBracketLeftCurlyBracketKeyword_3_5_2() { return cLeftSquareBracketLeftCurlyBracketKeyword_3_5_2; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_5_3() { return cParametersAssignment_3_5_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_5_3_0() { return cParametersParameterParserRuleCall_3_5_3_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_3_5_4() { return cGroup_3_5_4; }
		
		//","
		public Keyword getCommaKeyword_3_5_4_0() { return cCommaKeyword_3_5_4_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_5_4_1() { return cParametersAssignment_3_5_4_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_5_4_1_0() { return cParametersParameterParserRuleCall_3_5_4_1_0; }
		
		//"}]"
		public Keyword getRightCurlyBracketRightSquareBracketKeyword_3_5_5() { return cRightCurlyBracketRightSquareBracketKeyword_3_5_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=STRING ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ":" value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final PythonFileElements pPythonFile;
	private final PythonInstructionElements pPythonInstruction;
	private final ImportStatementElements pImportStatement;
	private final FromStringElements pFromString;
	private final FunctionElements pFunction;
	private final ReturnStatementElements pReturnStatement;
	private final LaunchDescriptionElements pLaunchDescription;
	private final NodeElements pNode;
	private final ParameterElements pParameter;
	private final TerminalRule tDOTTED_PARAM;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LaunchFileGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPythonFile = new PythonFileElements();
		this.pPythonInstruction = new PythonInstructionElements();
		this.pImportStatement = new ImportStatementElements();
		this.pFromString = new FromStringElements();
		this.pFunction = new FunctionElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pLaunchDescription = new LaunchDescriptionElements();
		this.pNode = new NodeElements();
		this.pParameter = new ParameterElements();
		this.tDOTTED_PARAM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.launchfile.dsl.LaunchFile.DOTTED_PARAM");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.spf.launchfile.dsl.LaunchFile".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PythonFile:
	//	instructions+=PythonInstruction*;
	public PythonFileElements getPythonFileAccess() {
		return pPythonFile;
	}
	
	public ParserRule getPythonFileRule() {
		return getPythonFileAccess().getRule();
	}
	
	//PythonInstruction:
	//	ImportStatement | Function;
	public PythonInstructionElements getPythonInstructionAccess() {
		return pPythonInstruction;
	}
	
	public ParserRule getPythonInstructionRule() {
		return getPythonInstructionAccess().getRule();
	}
	
	//ImportStatement:
	//	('from' from=(ID | FromString))?
	//	'import' imports+=(FromString | "LaunchDescription" | "Node") ("," imports+=(FromString | "LaunchDescription" |
	//	"Node"))*;
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}
	
	//FromString:
	//	DOTTED_PARAM;
	public FromStringElements getFromStringAccess() {
		return pFromString;
	}
	
	public ParserRule getFromStringRule() {
		return getFromStringAccess().getRule();
	}
	
	//Function:
	//	"def" name=ID "(" ")" ":"
	//	body+=PythonInstruction*
	//	body+=ReturnStatement?;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//ReturnStatement:
	//	"return" launchDescription=LaunchDescription;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//LaunchDescription:
	//	{LaunchDescription}
	//	'LaunchDescription'
	//	'(' "["
	//	nodes+=Node ("," nodes+=Node)* ","?
	//	"]" ')';
	public LaunchDescriptionElements getLaunchDescriptionAccess() {
		return pLaunchDescription;
	}
	
	public ParserRule getLaunchDescriptionRule() {
		return getLaunchDescriptionAccess().getRule();
	}
	
	//Node:
	//	{Node} ("Node" | "launch_ros.actions.Node")
	//	'(' (('node_name' "=" node_name=STRING)? & 'package' "=" package_name=STRING & ('namespace' "=" namespace=STRING)? &
	//	'node_executable' "=" node_executable=STRING & ('output' "=" output=STRING)? & 'parameters' "=" "[{"
	//	parameters+=Parameter ("," parameters+=Parameter)* "}]")?
	//	')';
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Parameter:
	//	name=STRING ":" value=STRING;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//terminal DOTTED_PARAM:
	//	ID ("." ID)+;
	public TerminalRule getDOTTED_PARAMRule() {
		return tDOTTED_PARAM;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
