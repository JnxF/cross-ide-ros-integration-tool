/*
 * generated by Xtext 2.22.0
 */
grammar InternalCMakeLists;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.spf.cmakelists.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.spf.cmakelists.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.spf.cmakelists.services.CMakeListsGrammarAccess;

}

@parser::members {

 	private CMakeListsGrammarAccess grammarAccess;

    public InternalCMakeListsParser(TokenStream input, CMakeListsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CMakeListsFile";
   	}

   	@Override
   	protected CMakeListsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCMakeListsFile
entryRuleCMakeListsFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCMakeListsFileRule()); }
	iv_ruleCMakeListsFile=ruleCMakeListsFile
	{ $current=$iv_ruleCMakeListsFile.current; }
	EOF;

// Rule CMakeListsFile
ruleCMakeListsFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCMakeListsFileAccess().getInstructionsInstructionParserRuleCall_0());
			}
			lv_instructions_0_0=ruleInstruction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCMakeListsFileRule());
				}
				add(
					$current,
					"instructions",
					lv_instructions_0_0,
					"org.spf.cmakelists.CMakeLists.Instruction");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getCMakeMinimumRequiredParserRuleCall_0());
		}
		this_CMakeMinimumRequired_0=ruleCMakeMinimumRequired
		{
			$current = $this_CMakeMinimumRequired_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getProjectInstructionParserRuleCall_1());
		}
		this_ProjectInstruction_1=ruleProjectInstruction
		{
			$current = $this_ProjectInstruction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getFindPackageParserRuleCall_2());
		}
		this_FindPackage_2=ruleFindPackage
		{
			$current = $this_FindPackage_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getAddExecutableParserRuleCall_3());
		}
		this_AddExecutable_3=ruleAddExecutable
		{
			$current = $this_AddExecutable_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getAmentTargetDependenciesParserRuleCall_4());
		}
		this_AmentTargetDependencies_4=ruleAmentTargetDependencies
		{
			$current = $this_AmentTargetDependencies_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getAmentPackageInstructionParserRuleCall_5());
		}
		this_AmentPackageInstruction_5=ruleAmentPackageInstruction
		{
			$current = $this_AmentPackageInstruction_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getInstallTargetsParserRuleCall_6());
		}
		this_InstallTargets_6=ruleInstallTargets
		{
			$current = $this_InstallTargets_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getInstallDirectoryParserRuleCall_7());
		}
		this_InstallDirectory_7=ruleInstallDirectory
		{
			$current = $this_InstallDirectory_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getIfInstructionParserRuleCall_8());
		}
		this_IfInstruction_8=ruleIfInstruction
		{
			$current = $this_IfInstruction_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getSetInstructionParserRuleCall_9());
		}
		this_SetInstruction_9=ruleSetInstruction
		{
			$current = $this_SetInstruction_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getAddCompileOptionsParserRuleCall_10());
		}
		this_AddCompileOptions_10=ruleAddCompileOptions
		{
			$current = $this_AddCompileOptions_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getUndefinedInstructionParserRuleCall_11());
		}
		this_UndefinedInstruction_11=ruleUndefinedInstruction
		{
			$current = $this_UndefinedInstruction_11.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCMakeMinimumRequired
entryRuleCMakeMinimumRequired returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCMakeMinimumRequiredRule()); }
	iv_ruleCMakeMinimumRequired=ruleCMakeMinimumRequired
	{ $current=$iv_ruleCMakeMinimumRequired.current; }
	EOF;

// Rule CMakeMinimumRequired
ruleCMakeMinimumRequired returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cmake_minimum_required'
		{
			newLeafNode(otherlv_0, grammarAccess.getCMakeMinimumRequiredAccess().getCmake_minimum_requiredKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCMakeMinimumRequiredAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='VERSION'
		{
			newLeafNode(otherlv_2, grammarAccess.getCMakeMinimumRequiredAccess().getVERSIONKeyword_2());
		}
		(
			(
				lv_version_3_0=RULE_VERSION_TERMINAL
				{
					newLeafNode(lv_version_3_0, grammarAccess.getCMakeMinimumRequiredAccess().getVersionVERSION_TERMINALTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCMakeMinimumRequiredRule());
					}
					setWithLastConsumed(
						$current,
						"version",
						lv_version_3_0,
						"org.spf.cmakelists.CMakeLists.VERSION_TERMINAL");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCMakeMinimumRequiredAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleProjectInstruction
entryRuleProjectInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectInstructionRule()); }
	iv_ruleProjectInstruction=ruleProjectInstruction
	{ $current=$iv_ruleProjectInstruction.current; }
	EOF;

// Rule ProjectInstruction
ruleProjectInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProjectInstructionAccess().getProjectInstructionAction_0(),
					$current);
			}
		)
		otherlv_1='project'
		{
			newLeafNode(otherlv_1, grammarAccess.getProjectInstructionAccess().getProjectKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectInstructionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectInstructionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getProjectInstructionAccess().getDeclaredPackageNameDeclaredPackageNameCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getProjectInstructionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFindPackage
entryRuleFindPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindPackageRule()); }
	iv_ruleFindPackage=ruleFindPackage
	{ $current=$iv_ruleFindPackage.current; }
	EOF;

// Rule FindPackage
ruleFindPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFindPackageAccess().getFindPackageAction_0(),
					$current);
			}
		)
		otherlv_1='find_package'
		{
			newLeafNode(otherlv_1, grammarAccess.getFindPackageAccess().getFind_packageKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFindPackageAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getFindPackageAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFindPackageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_required_4_0='REQUIRED'
				{
					newLeafNode(lv_required_4_0, grammarAccess.getFindPackageAccess().getRequiredREQUIREDKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFindPackageRule());
					}
					setWithLastConsumed($current, "required", lv_required_4_0 != null, "REQUIRED");
				}
			)
		)?
		(
			otherlv_5='COMPONENTS'
			{
				newLeafNode(otherlv_5, grammarAccess.getFindPackageAccess().getCOMPONENTSKeyword_5_0());
			}
			(
				(
					lv_components_6_0=RULE_ID
					{
						newLeafNode(lv_components_6_0, grammarAccess.getFindPackageAccess().getComponentsIDTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFindPackageRule());
						}
						addWithLastConsumed(
							$current,
							"components",
							lv_components_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)+
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFindPackageAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleAddExecutable
entryRuleAddExecutable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExecutableRule()); }
	iv_ruleAddExecutable=ruleAddExecutable
	{ $current=$iv_ruleAddExecutable.current; }
	EOF;

// Rule AddExecutable
ruleAddExecutable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add_executable'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddExecutableAccess().getAdd_executableKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddExecutableAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddExecutableAccess().getNameExecutableParserRuleCall_2_0());
				}
				lv_name_2_0=ruleExecutable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddExecutableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.spf.cmakelists.CMakeLists.Executable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAddExecutableAccess().getSourcesPathParserRuleCall_3_0());
				}
				lv_sources_3_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddExecutableRule());
					}
					add(
						$current,
						"sources",
						lv_sources_3_0,
						"org.spf.cmakelists.CMakeLists.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddExecutableAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePath
entryRulePath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current.getText(); }
	EOF;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getPathAccess().getIDTerminalRuleCall_0());
		}
		    |
		(
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getPathAccess().getIDTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getFullStopKeyword_1_1());
			}
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getPathAccess().getIDTerminalRuleCall_1_2());
			}
		)
		    |
		(
			kw='$'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getDollarSignKeyword_2_0());
			}
			kw='{'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getLeftCurlyBracketKeyword_2_1());
			}
			this_ID_6=RULE_ID
			{
				$current.merge(this_ID_6);
			}
			{
				newLeafNode(this_ID_6, grammarAccess.getPathAccess().getIDTerminalRuleCall_2_2());
			}
			kw='}'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getRightCurlyBracketKeyword_2_3());
			}
		)
		    |
		(
			this_ID_8=RULE_ID
			{
				$current.merge(this_ID_8);
			}
			{
				newLeafNode(this_ID_8, grammarAccess.getPathAccess().getIDTerminalRuleCall_3_0());
			}
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getSolidusKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getPathAccess().getPathParserRuleCall_3_2());
			}
			this_Path_10=rulePath
			{
				$current.merge(this_Path_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExecutable
entryRuleExecutable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecutableRule()); }
	iv_ruleExecutable=ruleExecutable
	{ $current=$iv_ruleExecutable.current; }
	EOF;

// Rule Executable
ruleExecutable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExecutableAccess().getExecutableAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExecutableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecutableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAmentTargetDependencies
entryRuleAmentTargetDependencies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAmentTargetDependenciesRule()); }
	iv_ruleAmentTargetDependencies=ruleAmentTargetDependencies
	{ $current=$iv_ruleAmentTargetDependencies.current; }
	EOF;

// Rule AmentTargetDependencies
ruleAmentTargetDependencies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ament_target_dependencies'
		{
			newLeafNode(otherlv_0, grammarAccess.getAmentTargetDependenciesAccess().getAment_target_dependenciesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAmentTargetDependenciesAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAmentTargetDependenciesRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAmentTargetDependenciesAccess().getNameExecutableCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAmentTargetDependenciesAccess().getDependenciesPathParserRuleCall_3_0());
				}
				lv_dependencies_3_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAmentTargetDependenciesRule());
					}
					add(
						$current,
						"dependencies",
						lv_dependencies_3_0,
						"org.spf.cmakelists.CMakeLists.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAmentTargetDependenciesAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAmentPackageInstruction
entryRuleAmentPackageInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAmentPackageInstructionRule()); }
	iv_ruleAmentPackageInstruction=ruleAmentPackageInstruction
	{ $current=$iv_ruleAmentPackageInstruction.current; }
	EOF;

// Rule AmentPackageInstruction
ruleAmentPackageInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAmentPackageInstructionAccess().getAmentPackageInstructionAction_0(),
					$current);
			}
		)
		otherlv_1='ament_package'
		{
			newLeafNode(otherlv_1, grammarAccess.getAmentPackageInstructionAccess().getAment_packageKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAmentPackageInstructionAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAmentPackageInstructionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleInstallTargets
entryRuleInstallTargets returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstallTargetsRule()); }
	iv_ruleInstallTargets=ruleInstallTargets
	{ $current=$iv_ruleInstallTargets.current; }
	EOF;

// Rule InstallTargets
ruleInstallTargets returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='install'
		{
			newLeafNode(otherlv_0, grammarAccess.getInstallTargetsAccess().getInstallKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getInstallTargetsAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='TARGETS'
		{
			newLeafNode(otherlv_2, grammarAccess.getInstallTargetsAccess().getTARGETSKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstallTargetsRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getInstallTargetsAccess().getTargetsExecutableCrossReference_3_0());
				}
			)
		)*
		(
			(
				lv_runtime_4_0='RUNTIME'
				{
					newLeafNode(lv_runtime_4_0, grammarAccess.getInstallTargetsAccess().getRuntimeRUNTIMEKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstallTargetsRule());
					}
					setWithLastConsumed($current, "runtime", lv_runtime_4_0 != null, "RUNTIME");
				}
			)
		)?
		otherlv_5='DESTINATION'
		{
			newLeafNode(otherlv_5, grammarAccess.getInstallTargetsAccess().getDESTINATIONKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstallTargetsAccess().getDestinationPathParserRuleCall_6_0());
				}
				lv_destination_6_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstallTargetsRule());
					}
					set(
						$current,
						"destination",
						lv_destination_6_0,
						"org.spf.cmakelists.CMakeLists.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getInstallTargetsAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleInstallDirectory
entryRuleInstallDirectory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstallDirectoryRule()); }
	iv_ruleInstallDirectory=ruleInstallDirectory
	{ $current=$iv_ruleInstallDirectory.current; }
	EOF;

// Rule InstallDirectory
ruleInstallDirectory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='install'
		{
			newLeafNode(otherlv_0, grammarAccess.getInstallDirectoryAccess().getInstallKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getInstallDirectoryAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='DIRECTORY'
		{
			newLeafNode(otherlv_2, grammarAccess.getInstallDirectoryAccess().getDIRECTORYKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstallDirectoryAccess().getDirectoryPathParserRuleCall_3_0());
				}
				lv_directory_3_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstallDirectoryRule());
					}
					set(
						$current,
						"directory",
						lv_directory_3_0,
						"org.spf.cmakelists.CMakeLists.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='DESTINATION'
		{
			newLeafNode(otherlv_4, grammarAccess.getInstallDirectoryAccess().getDESTINATIONKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstallDirectoryAccess().getDestinationPathParserRuleCall_5_0());
				}
				lv_destination_5_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstallDirectoryRule());
					}
					set(
						$current,
						"destination",
						lv_destination_5_0,
						"org.spf.cmakelists.CMakeLists.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='FILES_MATCHING'
			{
				newLeafNode(otherlv_6, grammarAccess.getInstallDirectoryAccess().getFILES_MATCHINGKeyword_6_0());
			}
			(
				otherlv_7='PATTERN'
				{
					newLeafNode(otherlv_7, grammarAccess.getInstallDirectoryAccess().getPATTERNKeyword_6_1_0());
				}
				(
					(
						lv_patterns_8_0=RULE_STRING
						{
							newLeafNode(lv_patterns_8_0, grammarAccess.getInstallDirectoryAccess().getPatternsSTRINGTerminalRuleCall_6_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInstallDirectoryRule());
							}
							addWithLastConsumed(
								$current,
								"patterns",
								lv_patterns_8_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)+
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getInstallDirectoryAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleIfInstruction
entryRuleIfInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfInstructionRule()); }
	iv_ruleIfInstruction=ruleIfInstruction
	{ $current=$iv_ruleIfInstruction.current; }
	EOF;

// Rule IfInstruction
ruleIfInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfInstructionAccess().getIfInstructionAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfInstructionAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfInstructionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					lv_predicate_3_0='AND'
					{
						newLeafNode(lv_predicate_3_0, grammarAccess.getIfInstructionAccess().getPredicateANDKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIfInstructionRule());
						}
						addWithLastConsumed($current, "predicate", lv_predicate_3_0, "AND");
					}
				)
			)
			    |
			otherlv_4='OR'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfInstructionAccess().getORKeyword_3_1());
			}
			    |
			otherlv_5='MATCHES'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfInstructionAccess().getMATCHESKeyword_3_2());
			}
			    |
			this_ID_6=RULE_ID
			{
				newLeafNode(this_ID_6, grammarAccess.getIfInstructionAccess().getIDTerminalRuleCall_3_3());
			}
			    |
			this_STRING_7=RULE_STRING
			{
				newLeafNode(this_STRING_7, grammarAccess.getIfInstructionAccess().getSTRINGTerminalRuleCall_3_4());
			}
		)*
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getIfInstructionAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfInstructionAccess().getInstructionsInstructionParserRuleCall_5_0());
				}
				lv_instructions_9_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfInstructionRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_9_0,
						"org.spf.cmakelists.CMakeLists.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='endif'
		{
			newLeafNode(otherlv_10, grammarAccess.getIfInstructionAccess().getEndifKeyword_6());
		}
		otherlv_11='('
		{
			newLeafNode(otherlv_11, grammarAccess.getIfInstructionAccess().getLeftParenthesisKeyword_7());
		}
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getIfInstructionAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleSetInstruction
entryRuleSetInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetInstructionRule()); }
	iv_ruleSetInstruction=ruleSetInstruction
	{ $current=$iv_ruleSetInstruction.current; }
	EOF;

// Rule SetInstruction
ruleSetInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetInstructionAccess().getSetKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSetInstructionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_variable_2_0=RULE_ID
				{
					newLeafNode(lv_variable_2_0, grammarAccess.getSetInstructionAccess().getVariableIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetInstructionRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					(
						lv_arguments_3_1=RULE_STRING
						{
							newLeafNode(lv_arguments_3_1, grammarAccess.getSetInstructionAccess().getArgumentsSTRINGTerminalRuleCall_3_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetInstructionRule());
							}
							addWithLastConsumed(
								$current,
								"arguments",
								lv_arguments_3_1,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
						    |
						{
							newCompositeNode(grammarAccess.getSetInstructionAccess().getArgumentsPathParserRuleCall_3_0_0_1());
						}
						lv_arguments_3_2=rulePath
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetInstructionRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_3_2,
								"org.spf.cmakelists.CMakeLists.Path");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					lv_arguments_4_0=RULE_INT
					{
						newLeafNode(lv_arguments_4_0, grammarAccess.getSetInstructionAccess().getArgumentsINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetInstructionRule());
						}
						addWithLastConsumed(
							$current,
							"arguments",
							lv_arguments_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetInstructionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAddCompileOptions
entryRuleAddCompileOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddCompileOptionsRule()); }
	iv_ruleAddCompileOptions=ruleAddCompileOptions
	{ $current=$iv_ruleAddCompileOptions.current; }
	EOF;

// Rule AddCompileOptions
ruleAddCompileOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add_compile_options'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddCompileOptionsAccess().getAdd_compile_optionsKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAddCompileOptionsAccess().getLeftParenthesisKeyword_1());
		}
		(
			otherlv_2='-'
			{
				newLeafNode(otherlv_2, grammarAccess.getAddCompileOptionsAccess().getHyphenMinusKeyword_2_0());
			}
			(
				(
					lv_options_3_0=RULE_ID
					{
						newLeafNode(lv_options_3_0, grammarAccess.getAddCompileOptionsAccess().getOptionsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAddCompileOptionsRule());
						}
						addWithLastConsumed(
							$current,
							"options",
							lv_options_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAddCompileOptionsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleUndefinedInstruction
entryRuleUndefinedInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUndefinedInstructionRule()); }
	iv_ruleUndefinedInstruction=ruleUndefinedInstruction
	{ $current=$iv_ruleUndefinedInstruction.current; }
	EOF;

// Rule UndefinedInstruction
ruleUndefinedInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getUndefinedInstructionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUndefinedInstructionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUndefinedInstructionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					(
						lv_arguments_2_1=RULE_STRING
						{
							newLeafNode(lv_arguments_2_1, grammarAccess.getUndefinedInstructionAccess().getArgumentsSTRINGTerminalRuleCall_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUndefinedInstructionRule());
							}
							addWithLastConsumed(
								$current,
								"arguments",
								lv_arguments_2_1,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
						    |
						{
							newCompositeNode(grammarAccess.getUndefinedInstructionAccess().getArgumentsPathParserRuleCall_2_0_0_1());
						}
						lv_arguments_2_2=rulePath
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUndefinedInstructionRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_2_2,
								"org.spf.cmakelists.CMakeLists.Path");
							afterParserOrEnumRuleCall();
						}
						    |
						lv_arguments_2_3=RULE_DECORATED_PACKAGE
						{
							newLeafNode(lv_arguments_2_3, grammarAccess.getUndefinedInstructionAccess().getArgumentsDECORATED_PACKAGETerminalRuleCall_2_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUndefinedInstructionRule());
							}
							addWithLastConsumed(
								$current,
								"arguments",
								lv_arguments_2_3,
								"org.spf.cmakelists.CMakeLists.DECORATED_PACKAGE");
						}
					)
				)
			)
			    |
			(
				(
					lv_arguments_3_0=RULE_INT
					{
						newLeafNode(lv_arguments_3_0, grammarAccess.getUndefinedInstructionAccess().getArgumentsINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUndefinedInstructionRule());
						}
						addWithLastConsumed(
							$current,
							"arguments",
							lv_arguments_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getUndefinedInstructionAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_DECORATED_PACKAGE : RULE_ID '::' RULE_ID;

RULE_VERSION_TERMINAL : RULE_INT ('.' RULE_INT)+;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
