/*
 * generated by Xtext 2.22.0
 */
package org.spf.cmakelists.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CMakeListsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CMakeListsFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.CMakeListsFile");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//CMakeListsFile:
		//	instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0() { return cInstructionsInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCMakeMinimumRequiredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProjectInstructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFindPackageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddExecutableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAmentTargetDependenciesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAmentPackageInstructionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInstallTargetsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInstallDirectoryParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfInstructionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetInstructionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAddCompileOptionsParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUndefinedInstructionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Instruction:
		//	CMakeMinimumRequired | ProjectInstruction | FindPackage | AddExecutable | AmentTargetDependencies |
		//	AmentPackageInstruction | InstallTargets | InstallDirectory | IfInstruction | SetInstruction | AddCompileOptions |
		//	UndefinedInstruction;
		@Override public ParserRule getRule() { return rule; }
		
		//CMakeMinimumRequired | ProjectInstruction | FindPackage | AddExecutable | AmentTargetDependencies |
		//AmentPackageInstruction | InstallTargets | InstallDirectory | IfInstruction | SetInstruction | AddCompileOptions |
		//UndefinedInstruction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CMakeMinimumRequired
		public RuleCall getCMakeMinimumRequiredParserRuleCall_0() { return cCMakeMinimumRequiredParserRuleCall_0; }
		
		//ProjectInstruction
		public RuleCall getProjectInstructionParserRuleCall_1() { return cProjectInstructionParserRuleCall_1; }
		
		//FindPackage
		public RuleCall getFindPackageParserRuleCall_2() { return cFindPackageParserRuleCall_2; }
		
		//AddExecutable
		public RuleCall getAddExecutableParserRuleCall_3() { return cAddExecutableParserRuleCall_3; }
		
		//AmentTargetDependencies
		public RuleCall getAmentTargetDependenciesParserRuleCall_4() { return cAmentTargetDependenciesParserRuleCall_4; }
		
		//AmentPackageInstruction
		public RuleCall getAmentPackageInstructionParserRuleCall_5() { return cAmentPackageInstructionParserRuleCall_5; }
		
		//InstallTargets
		public RuleCall getInstallTargetsParserRuleCall_6() { return cInstallTargetsParserRuleCall_6; }
		
		//InstallDirectory
		public RuleCall getInstallDirectoryParserRuleCall_7() { return cInstallDirectoryParserRuleCall_7; }
		
		//IfInstruction
		public RuleCall getIfInstructionParserRuleCall_8() { return cIfInstructionParserRuleCall_8; }
		
		//SetInstruction
		public RuleCall getSetInstructionParserRuleCall_9() { return cSetInstructionParserRuleCall_9; }
		
		//AddCompileOptions
		public RuleCall getAddCompileOptionsParserRuleCall_10() { return cAddCompileOptionsParserRuleCall_10; }
		
		//UndefinedInstruction
		public RuleCall getUndefinedInstructionParserRuleCall_11() { return cUndefinedInstructionParserRuleCall_11; }
	}
	public class CMakeMinimumRequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.CMakeMinimumRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmake_minimum_requiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVERSIONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionVERSION_TERMINALTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CMakeMinimumRequired:
		//	'cmake_minimum_required' '(' 'VERSION' version=VERSION_TERMINAL ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'cmake_minimum_required' '(' 'VERSION' version=VERSION_TERMINAL ')'
		public Group getGroup() { return cGroup; }
		
		//'cmake_minimum_required'
		public Keyword getCmake_minimum_requiredKeyword_0() { return cCmake_minimum_requiredKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'VERSION'
		public Keyword getVERSIONKeyword_2() { return cVERSIONKeyword_2; }
		
		//version=VERSION_TERMINAL
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//VERSION_TERMINAL
		public RuleCall getVersionVERSION_TERMINALTerminalRuleCall_3_0() { return cVersionVERSION_TERMINALTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ProjectInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.ProjectInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProjectInstructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclaredPackageNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDeclaredPackageNameDeclaredPackageNameCrossReference_3_0 = (CrossReference)cDeclaredPackageNameAssignment_3.eContents().get(0);
		private final RuleCall cDeclaredPackageNameDeclaredPackageNameIDTerminalRuleCall_3_0_1 = (RuleCall)cDeclaredPackageNameDeclaredPackageNameCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProjectInstruction:
		//	{ProjectInstruction}
		//	'project' '(' declaredPackageName=[packagexml::DeclaredPackageName] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProjectInstruction} 'project' '(' declaredPackageName=[packagexml::DeclaredPackageName] ')'
		public Group getGroup() { return cGroup; }
		
		//{ProjectInstruction}
		public Action getProjectInstructionAction_0() { return cProjectInstructionAction_0; }
		
		//'project'
		public Keyword getProjectKeyword_1() { return cProjectKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//declaredPackageName=[packagexml::DeclaredPackageName]
		public Assignment getDeclaredPackageNameAssignment_3() { return cDeclaredPackageNameAssignment_3; }
		
		//[packagexml::DeclaredPackageName]
		public CrossReference getDeclaredPackageNameDeclaredPackageNameCrossReference_3_0() { return cDeclaredPackageNameDeclaredPackageNameCrossReference_3_0; }
		
		//ID
		public RuleCall getDeclaredPackageNameDeclaredPackageNameIDTerminalRuleCall_3_0_1() { return cDeclaredPackageNameDeclaredPackageNameIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FindPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.FindPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFindPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFind_packageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cRequiredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cRequiredREQUIREDKeyword_4_0 = (Keyword)cRequiredAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCOMPONENTSKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cComponentsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cComponentsIDTerminalRuleCall_5_1_0 = (RuleCall)cComponentsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FindPackage:
		//	{FindPackage}
		//	'find_package' '(' name=ID required?='REQUIRED'? ("COMPONENTS" components+=ID+)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FindPackage} 'find_package' '(' name=ID required?='REQUIRED'? ("COMPONENTS" components+=ID+)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FindPackage}
		public Action getFindPackageAction_0() { return cFindPackageAction_0; }
		
		//'find_package'
		public Keyword getFind_packageKeyword_1() { return cFind_packageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//required?='REQUIRED'?
		public Assignment getRequiredAssignment_4() { return cRequiredAssignment_4; }
		
		//'REQUIRED'
		public Keyword getRequiredREQUIREDKeyword_4_0() { return cRequiredREQUIREDKeyword_4_0; }
		
		//("COMPONENTS" components+=ID+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"COMPONENTS"
		public Keyword getCOMPONENTSKeyword_5_0() { return cCOMPONENTSKeyword_5_0; }
		
		//components+=ID+
		public Assignment getComponentsAssignment_5_1() { return cComponentsAssignment_5_1; }
		
		//ID
		public RuleCall getComponentsIDTerminalRuleCall_5_1_0() { return cComponentsIDTerminalRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AddExecutableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.AddExecutable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdd_executableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameExecutableParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSourcesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourcesPathParserRuleCall_3_0 = (RuleCall)cSourcesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddExecutable:
		//	'add_executable' '(' name=Executable sources+=Path+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'add_executable' '(' name=Executable sources+=Path+ ')'
		public Group getGroup() { return cGroup; }
		
		//'add_executable'
		public Keyword getAdd_executableKeyword_0() { return cAdd_executableKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=Executable
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Executable
		public RuleCall getNameExecutableParserRuleCall_2_0() { return cNameExecutableParserRuleCall_2_0; }
		
		//sources+=Path+
		public Assignment getSourcesAssignment_3() { return cSourcesAssignment_3; }
		
		//Path
		public RuleCall getSourcesPathParserRuleCall_3_0() { return cSourcesPathParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.Path");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDollarSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSolidusKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cPathParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Path:
		//	ID | ID "." ID |
		//	"$" "{" ID "}" | ID "/" Path;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | ID "." ID | "$" "{" ID "}" | ID "/" Path
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ID "." ID
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
		
		//"$" "{" ID "}"
		public Group getGroup_2() { return cGroup_2; }
		
		//"$"
		public Keyword getDollarSignKeyword_2_0() { return cDollarSignKeyword_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//ID "/" Path
		public Group getGroup_3() { return cGroup_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_0() { return cIDTerminalRuleCall_3_0; }
		
		//"/"
		public Keyword getSolidusKeyword_3_1() { return cSolidusKeyword_3_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_3_2() { return cPathParserRuleCall_3_2; }
	}
	public class ExecutableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.Executable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecutableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Executable:
		//	{Executable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Executable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Executable}
		public Action getExecutableAction_0() { return cExecutableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AmentTargetDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.AmentTargetDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAment_target_dependenciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameExecutableCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameExecutableIDTerminalRuleCall_2_0_1 = (RuleCall)cNameExecutableCrossReference_2_0.eContents().get(1);
		private final Assignment cDependenciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDependenciesPathParserRuleCall_3_0 = (RuleCall)cDependenciesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AmentTargetDependencies:
		//	'ament_target_dependencies' '(' name=[Executable] dependencies+=Path* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ament_target_dependencies' '(' name=[Executable] dependencies+=Path* ')'
		public Group getGroup() { return cGroup; }
		
		//'ament_target_dependencies'
		public Keyword getAment_target_dependenciesKeyword_0() { return cAment_target_dependenciesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=[Executable]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//[Executable]
		public CrossReference getNameExecutableCrossReference_2_0() { return cNameExecutableCrossReference_2_0; }
		
		//ID
		public RuleCall getNameExecutableIDTerminalRuleCall_2_0_1() { return cNameExecutableIDTerminalRuleCall_2_0_1; }
		
		//dependencies+=Path*
		public Assignment getDependenciesAssignment_3() { return cDependenciesAssignment_3; }
		
		//Path
		public RuleCall getDependenciesPathParserRuleCall_3_0() { return cDependenciesPathParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AmentPackageInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.AmentPackageInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAmentPackageInstructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAment_packageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AmentPackageInstruction:
		//	{AmentPackageInstruction}
		//	'ament_package' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AmentPackageInstruction} 'ament_package' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{AmentPackageInstruction}
		public Action getAmentPackageInstructionAction_0() { return cAmentPackageInstructionAction_0; }
		
		//'ament_package'
		public Keyword getAment_packageKeyword_1() { return cAment_packageKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class InstallTargetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.InstallTargets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTARGETSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetsExecutableCrossReference_3_0 = (CrossReference)cTargetsAssignment_3.eContents().get(0);
		private final RuleCall cTargetsExecutableIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetsExecutableCrossReference_3_0.eContents().get(1);
		private final Assignment cRuntimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cRuntimeRUNTIMEKeyword_4_0 = (Keyword)cRuntimeAssignment_4.eContents().get(0);
		private final Keyword cDESTINATIONKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDestinationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDestinationPathParserRuleCall_6_0 = (RuleCall)cDestinationAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InstallTargets:
		//	'install' '('
		//	'TARGETS' targets+=[Executable]*
		//	runtime?='RUNTIME'?
		//	'DESTINATION' destination=Path
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'install' '(' 'TARGETS' targets+=[Executable]* runtime?='RUNTIME'? 'DESTINATION' destination=Path ')'
		public Group getGroup() { return cGroup; }
		
		//'install'
		public Keyword getInstallKeyword_0() { return cInstallKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'TARGETS'
		public Keyword getTARGETSKeyword_2() { return cTARGETSKeyword_2; }
		
		//targets+=[Executable]*
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }
		
		//[Executable]
		public CrossReference getTargetsExecutableCrossReference_3_0() { return cTargetsExecutableCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetsExecutableIDTerminalRuleCall_3_0_1() { return cTargetsExecutableIDTerminalRuleCall_3_0_1; }
		
		//runtime?='RUNTIME'?
		public Assignment getRuntimeAssignment_4() { return cRuntimeAssignment_4; }
		
		//'RUNTIME'
		public Keyword getRuntimeRUNTIMEKeyword_4_0() { return cRuntimeRUNTIMEKeyword_4_0; }
		
		//'DESTINATION'
		public Keyword getDESTINATIONKeyword_5() { return cDESTINATIONKeyword_5; }
		
		//destination=Path
		public Assignment getDestinationAssignment_6() { return cDestinationAssignment_6; }
		
		//Path
		public RuleCall getDestinationPathParserRuleCall_6_0() { return cDestinationPathParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class InstallDirectoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.InstallDirectory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDIRECTORYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectoryPathParserRuleCall_3_0 = (RuleCall)cDirectoryAssignment_3.eContents().get(0);
		private final Keyword cDESTINATIONKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDestinationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDestinationPathParserRuleCall_5_0 = (RuleCall)cDestinationAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFILES_MATCHINGKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cPATTERNKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cPatternsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cPatternsSTRINGTerminalRuleCall_6_1_1_0 = (RuleCall)cPatternsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InstallDirectory:
		//	'install' '('
		//	'DIRECTORY' directory=Path
		//	'DESTINATION' destination=Path ("FILES_MATCHING" ("PATTERN" patterns+=STRING)+)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'install' '(' 'DIRECTORY' directory=Path 'DESTINATION' destination=Path ("FILES_MATCHING" ("PATTERN"
		//patterns+=STRING)+)? ')'
		public Group getGroup() { return cGroup; }
		
		//'install'
		public Keyword getInstallKeyword_0() { return cInstallKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'DIRECTORY'
		public Keyword getDIRECTORYKeyword_2() { return cDIRECTORYKeyword_2; }
		
		//directory=Path
		public Assignment getDirectoryAssignment_3() { return cDirectoryAssignment_3; }
		
		//Path
		public RuleCall getDirectoryPathParserRuleCall_3_0() { return cDirectoryPathParserRuleCall_3_0; }
		
		//'DESTINATION'
		public Keyword getDESTINATIONKeyword_4() { return cDESTINATIONKeyword_4; }
		
		//destination=Path
		public Assignment getDestinationAssignment_5() { return cDestinationAssignment_5; }
		
		//Path
		public RuleCall getDestinationPathParserRuleCall_5_0() { return cDestinationPathParserRuleCall_5_0; }
		
		//("FILES_MATCHING" ("PATTERN" patterns+=STRING)+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//"FILES_MATCHING"
		public Keyword getFILES_MATCHINGKeyword_6_0() { return cFILES_MATCHINGKeyword_6_0; }
		
		//("PATTERN" patterns+=STRING)+
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//"PATTERN"
		public Keyword getPATTERNKeyword_6_1_0() { return cPATTERNKeyword_6_1_0; }
		
		//patterns+=STRING
		public Assignment getPatternsAssignment_6_1_1() { return cPatternsAssignment_6_1_1; }
		
		//STRING
		public RuleCall getPatternsSTRINGTerminalRuleCall_6_1_1_0() { return cPatternsSTRINGTerminalRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class IfInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.IfInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfInstructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cPredicateANDKeyword_3_0_0 = (Keyword)cPredicateAssignment_3_0.eContents().get(0);
		private final Keyword cORKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cMATCHESKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstructionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstructionsInstructionParserRuleCall_5_0 = (RuleCall)cInstructionsAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IfInstruction:
		//	{IfInstruction}
		//	"if" "(" (predicate+="AND" | "OR" | "MATCHES" | ID | STRING)* ")"
		//	instructions+=Instruction*
		//	"endif" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{IfInstruction} "if" "(" (predicate+="AND" | "OR" | "MATCHES" | ID | STRING)* ")" instructions+=Instruction* "endif" "("
		//")"
		public Group getGroup() { return cGroup; }
		
		//{IfInstruction}
		public Action getIfInstructionAction_0() { return cIfInstructionAction_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(predicate+="AND" | "OR" | "MATCHES" | ID | STRING)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//predicate+="AND"
		public Assignment getPredicateAssignment_3_0() { return cPredicateAssignment_3_0; }
		
		//"AND"
		public Keyword getPredicateANDKeyword_3_0_0() { return cPredicateANDKeyword_3_0_0; }
		
		//"OR"
		public Keyword getORKeyword_3_1() { return cORKeyword_3_1; }
		
		//"MATCHES"
		public Keyword getMATCHESKeyword_3_2() { return cMATCHESKeyword_3_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_3() { return cIDTerminalRuleCall_3_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_4() { return cSTRINGTerminalRuleCall_3_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_5() { return cInstructionsAssignment_5; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_5_0() { return cInstructionsInstructionParserRuleCall_5_0; }
		
		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class SetInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.SetInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableIDTerminalRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Alternatives cArgumentsAlternatives_3_0_0 = (Alternatives)cArgumentsAssignment_3_0.eContents().get(0);
		private final RuleCall cArgumentsSTRINGTerminalRuleCall_3_0_0_0 = (RuleCall)cArgumentsAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cArgumentsPathParserRuleCall_3_0_0_1 = (RuleCall)cArgumentsAlternatives_3_0_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cArgumentsINTTerminalRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetInstruction:
		//	"set" "(" variable=ID (arguments+=(STRING | Path) | arguments+=INT)*
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"set" "(" variable=ID (arguments+=(STRING | Path) | arguments+=INT)* ")"
		public Group getGroup() { return cGroup; }
		
		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=ID
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_2_0() { return cVariableIDTerminalRuleCall_2_0; }
		
		//(arguments+=(STRING | Path) | arguments+=INT)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//arguments+=(STRING | Path)
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//(STRING | Path)
		public Alternatives getArgumentsAlternatives_3_0_0() { return cArgumentsAlternatives_3_0_0; }
		
		//STRING
		public RuleCall getArgumentsSTRINGTerminalRuleCall_3_0_0_0() { return cArgumentsSTRINGTerminalRuleCall_3_0_0_0; }
		
		//Path
		public RuleCall getArgumentsPathParserRuleCall_3_0_0_1() { return cArgumentsPathParserRuleCall_3_0_0_1; }
		
		//arguments+=INT
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }
		
		//INT
		public RuleCall getArgumentsINTTerminalRuleCall_3_1_0() { return cArgumentsINTTerminalRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AddCompileOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.AddCompileOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAdd_compile_optionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsIDTerminalRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AddCompileOptions:
		//	"add_compile_options" "(" ("-" options+=ID)+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"add_compile_options" "(" ("-" options+=ID)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"add_compile_options"
		public Keyword getAdd_compile_optionsKeyword_0() { return cAdd_compile_optionsKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//("-" options+=ID)+
		public Group getGroup_2() { return cGroup_2; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }
		
		//options+=ID
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }
		
		//ID
		public RuleCall getOptionsIDTerminalRuleCall_2_1_0() { return cOptionsIDTerminalRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class UndefinedInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.UndefinedInstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Alternatives cArgumentsAlternatives_2_0_0 = (Alternatives)cArgumentsAssignment_2_0.eContents().get(0);
		private final RuleCall cArgumentsSTRINGTerminalRuleCall_2_0_0_0 = (RuleCall)cArgumentsAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cArgumentsPathParserRuleCall_2_0_0_1 = (RuleCall)cArgumentsAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cArgumentsDECORATED_PACKAGETerminalRuleCall_2_0_0_2 = (RuleCall)cArgumentsAlternatives_2_0_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgumentsINTTerminalRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UndefinedInstruction:
		//	name=ID "(" (arguments+=(STRING | Path | DECORATED_PACKAGE) | arguments+=INT)*
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "(" (arguments+=(STRING | Path | DECORATED_PACKAGE) | arguments+=INT)* ")"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=(STRING | Path | DECORATED_PACKAGE) | arguments+=INT)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//arguments+=(STRING | Path | DECORATED_PACKAGE)
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//(STRING | Path | DECORATED_PACKAGE)
		public Alternatives getArgumentsAlternatives_2_0_0() { return cArgumentsAlternatives_2_0_0; }
		
		//STRING
		public RuleCall getArgumentsSTRINGTerminalRuleCall_2_0_0_0() { return cArgumentsSTRINGTerminalRuleCall_2_0_0_0; }
		
		//Path
		public RuleCall getArgumentsPathParserRuleCall_2_0_0_1() { return cArgumentsPathParserRuleCall_2_0_0_1; }
		
		//DECORATED_PACKAGE
		public RuleCall getArgumentsDECORATED_PACKAGETerminalRuleCall_2_0_0_2() { return cArgumentsDECORATED_PACKAGETerminalRuleCall_2_0_0_2; }
		
		//arguments+=INT
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//INT
		public RuleCall getArgumentsINTTerminalRuleCall_2_1_0() { return cArgumentsINTTerminalRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final CMakeListsFileElements pCMakeListsFile;
	private final InstructionElements pInstruction;
	private final CMakeMinimumRequiredElements pCMakeMinimumRequired;
	private final ProjectInstructionElements pProjectInstruction;
	private final FindPackageElements pFindPackage;
	private final AddExecutableElements pAddExecutable;
	private final PathElements pPath;
	private final ExecutableElements pExecutable;
	private final AmentTargetDependenciesElements pAmentTargetDependencies;
	private final AmentPackageInstructionElements pAmentPackageInstruction;
	private final InstallTargetsElements pInstallTargets;
	private final InstallDirectoryElements pInstallDirectory;
	private final IfInstructionElements pIfInstruction;
	private final SetInstructionElements pSetInstruction;
	private final AddCompileOptionsElements pAddCompileOptions;
	private final UndefinedInstructionElements pUndefinedInstruction;
	private final TerminalRule tDECORATED_PACKAGE;
	private final TerminalRule tVERSION_TERMINAL;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CMakeListsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCMakeListsFile = new CMakeListsFileElements();
		this.pInstruction = new InstructionElements();
		this.pCMakeMinimumRequired = new CMakeMinimumRequiredElements();
		this.pProjectInstruction = new ProjectInstructionElements();
		this.pFindPackage = new FindPackageElements();
		this.pAddExecutable = new AddExecutableElements();
		this.pPath = new PathElements();
		this.pExecutable = new ExecutableElements();
		this.pAmentTargetDependencies = new AmentTargetDependenciesElements();
		this.pAmentPackageInstruction = new AmentPackageInstructionElements();
		this.pInstallTargets = new InstallTargetsElements();
		this.pInstallDirectory = new InstallDirectoryElements();
		this.pIfInstruction = new IfInstructionElements();
		this.pSetInstruction = new SetInstructionElements();
		this.pAddCompileOptions = new AddCompileOptionsElements();
		this.pUndefinedInstruction = new UndefinedInstructionElements();
		this.tDECORATED_PACKAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.DECORATED_PACKAGE");
		this.tVERSION_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.VERSION_TERMINAL");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.spf.cmakelists.CMakeLists.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.spf.cmakelists.CMakeLists".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CMakeListsFile:
	//	instructions+=Instruction*;
	public CMakeListsFileElements getCMakeListsFileAccess() {
		return pCMakeListsFile;
	}
	
	public ParserRule getCMakeListsFileRule() {
		return getCMakeListsFileAccess().getRule();
	}
	
	//Instruction:
	//	CMakeMinimumRequired | ProjectInstruction | FindPackage | AddExecutable | AmentTargetDependencies |
	//	AmentPackageInstruction | InstallTargets | InstallDirectory | IfInstruction | SetInstruction | AddCompileOptions |
	//	UndefinedInstruction;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//CMakeMinimumRequired:
	//	'cmake_minimum_required' '(' 'VERSION' version=VERSION_TERMINAL ')';
	public CMakeMinimumRequiredElements getCMakeMinimumRequiredAccess() {
		return pCMakeMinimumRequired;
	}
	
	public ParserRule getCMakeMinimumRequiredRule() {
		return getCMakeMinimumRequiredAccess().getRule();
	}
	
	//ProjectInstruction:
	//	{ProjectInstruction}
	//	'project' '(' declaredPackageName=[packagexml::DeclaredPackageName] ')';
	public ProjectInstructionElements getProjectInstructionAccess() {
		return pProjectInstruction;
	}
	
	public ParserRule getProjectInstructionRule() {
		return getProjectInstructionAccess().getRule();
	}
	
	//FindPackage:
	//	{FindPackage}
	//	'find_package' '(' name=ID required?='REQUIRED'? ("COMPONENTS" components+=ID+)? ')';
	public FindPackageElements getFindPackageAccess() {
		return pFindPackage;
	}
	
	public ParserRule getFindPackageRule() {
		return getFindPackageAccess().getRule();
	}
	
	//AddExecutable:
	//	'add_executable' '(' name=Executable sources+=Path+ ')';
	public AddExecutableElements getAddExecutableAccess() {
		return pAddExecutable;
	}
	
	public ParserRule getAddExecutableRule() {
		return getAddExecutableAccess().getRule();
	}
	
	//Path:
	//	ID | ID "." ID |
	//	"$" "{" ID "}" | ID "/" Path;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//Executable:
	//	{Executable} name=ID;
	public ExecutableElements getExecutableAccess() {
		return pExecutable;
	}
	
	public ParserRule getExecutableRule() {
		return getExecutableAccess().getRule();
	}
	
	//AmentTargetDependencies:
	//	'ament_target_dependencies' '(' name=[Executable] dependencies+=Path* ')';
	public AmentTargetDependenciesElements getAmentTargetDependenciesAccess() {
		return pAmentTargetDependencies;
	}
	
	public ParserRule getAmentTargetDependenciesRule() {
		return getAmentTargetDependenciesAccess().getRule();
	}
	
	//AmentPackageInstruction:
	//	{AmentPackageInstruction}
	//	'ament_package' '(' ')';
	public AmentPackageInstructionElements getAmentPackageInstructionAccess() {
		return pAmentPackageInstruction;
	}
	
	public ParserRule getAmentPackageInstructionRule() {
		return getAmentPackageInstructionAccess().getRule();
	}
	
	//InstallTargets:
	//	'install' '('
	//	'TARGETS' targets+=[Executable]*
	//	runtime?='RUNTIME'?
	//	'DESTINATION' destination=Path
	//	')';
	public InstallTargetsElements getInstallTargetsAccess() {
		return pInstallTargets;
	}
	
	public ParserRule getInstallTargetsRule() {
		return getInstallTargetsAccess().getRule();
	}
	
	//InstallDirectory:
	//	'install' '('
	//	'DIRECTORY' directory=Path
	//	'DESTINATION' destination=Path ("FILES_MATCHING" ("PATTERN" patterns+=STRING)+)?
	//	')';
	public InstallDirectoryElements getInstallDirectoryAccess() {
		return pInstallDirectory;
	}
	
	public ParserRule getInstallDirectoryRule() {
		return getInstallDirectoryAccess().getRule();
	}
	
	//IfInstruction:
	//	{IfInstruction}
	//	"if" "(" (predicate+="AND" | "OR" | "MATCHES" | ID | STRING)* ")"
	//	instructions+=Instruction*
	//	"endif" "(" ")";
	public IfInstructionElements getIfInstructionAccess() {
		return pIfInstruction;
	}
	
	public ParserRule getIfInstructionRule() {
		return getIfInstructionAccess().getRule();
	}
	
	//SetInstruction:
	//	"set" "(" variable=ID (arguments+=(STRING | Path) | arguments+=INT)*
	//	")";
	public SetInstructionElements getSetInstructionAccess() {
		return pSetInstruction;
	}
	
	public ParserRule getSetInstructionRule() {
		return getSetInstructionAccess().getRule();
	}
	
	//AddCompileOptions:
	//	"add_compile_options" "(" ("-" options+=ID)+ ")";
	public AddCompileOptionsElements getAddCompileOptionsAccess() {
		return pAddCompileOptions;
	}
	
	public ParserRule getAddCompileOptionsRule() {
		return getAddCompileOptionsAccess().getRule();
	}
	
	//UndefinedInstruction:
	//	name=ID "(" (arguments+=(STRING | Path | DECORATED_PACKAGE) | arguments+=INT)*
	//	")";
	public UndefinedInstructionElements getUndefinedInstructionAccess() {
		return pUndefinedInstruction;
	}
	
	public ParserRule getUndefinedInstructionRule() {
		return getUndefinedInstructionAccess().getRule();
	}
	
	//terminal DECORATED_PACKAGE:
	//	ID "::" ID;
	public TerminalRule getDECORATED_PACKAGERule() {
		return tDECORATED_PACKAGE;
	}
	
	//terminal VERSION_TERMINAL:
	//	INT ('.' INT)+;
	public TerminalRule getVERSION_TERMINALRule() {
		return tVERSION_TERMINAL;
	}
	
	//@Override
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
