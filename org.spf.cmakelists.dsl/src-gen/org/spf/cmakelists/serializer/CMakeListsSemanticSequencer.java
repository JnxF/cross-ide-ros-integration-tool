/*
 * generated by Xtext 2.22.0
 */
package org.spf.cmakelists.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.spf.CMakeLists.AddCompileOptions;
import org.spf.CMakeLists.AddExecutable;
import org.spf.CMakeLists.AmentPackageInstruction;
import org.spf.CMakeLists.AmentTargetDependencies;
import org.spf.CMakeLists.CMakeListsFile;
import org.spf.CMakeLists.CMakeListsPackage;
import org.spf.CMakeLists.CMakeMinimumRequired;
import org.spf.CMakeLists.Executable;
import org.spf.CMakeLists.FindPackage;
import org.spf.CMakeLists.IfInstruction;
import org.spf.CMakeLists.InstallDirectory;
import org.spf.CMakeLists.InstallTargets;
import org.spf.CMakeLists.ProjectInstruction;
import org.spf.CMakeLists.SetInstruction;
import org.spf.CMakeLists.UndefinedInstruction;
import org.spf.cmakelists.services.CMakeListsGrammarAccess;

@SuppressWarnings("all")
public class CMakeListsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CMakeListsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CMakeListsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CMakeListsPackage.ADD_COMPILE_OPTIONS:
				sequence_AddCompileOptions(context, (AddCompileOptions) semanticObject); 
				return; 
			case CMakeListsPackage.ADD_EXECUTABLE:
				sequence_AddExecutable(context, (AddExecutable) semanticObject); 
				return; 
			case CMakeListsPackage.AMENT_PACKAGE_INSTRUCTION:
				sequence_AmentPackageInstruction(context, (AmentPackageInstruction) semanticObject); 
				return; 
			case CMakeListsPackage.AMENT_TARGET_DEPENDENCIES:
				sequence_AmentTargetDependencies(context, (AmentTargetDependencies) semanticObject); 
				return; 
			case CMakeListsPackage.CMAKE_LISTS_FILE:
				sequence_CMakeListsFile(context, (CMakeListsFile) semanticObject); 
				return; 
			case CMakeListsPackage.CMAKE_MINIMUM_REQUIRED:
				sequence_CMakeMinimumRequired(context, (CMakeMinimumRequired) semanticObject); 
				return; 
			case CMakeListsPackage.EXECUTABLE:
				sequence_Executable(context, (Executable) semanticObject); 
				return; 
			case CMakeListsPackage.FIND_PACKAGE:
				sequence_FindPackage(context, (FindPackage) semanticObject); 
				return; 
			case CMakeListsPackage.IF_INSTRUCTION:
				sequence_IfInstruction(context, (IfInstruction) semanticObject); 
				return; 
			case CMakeListsPackage.INSTALL_DIRECTORY:
				sequence_InstallDirectory(context, (InstallDirectory) semanticObject); 
				return; 
			case CMakeListsPackage.INSTALL_TARGETS:
				sequence_InstallTargets(context, (InstallTargets) semanticObject); 
				return; 
			case CMakeListsPackage.PROJECT_INSTRUCTION:
				sequence_ProjectInstruction(context, (ProjectInstruction) semanticObject); 
				return; 
			case CMakeListsPackage.SET_INSTRUCTION:
				sequence_SetInstruction(context, (SetInstruction) semanticObject); 
				return; 
			case CMakeListsPackage.UNDEFINED_INSTRUCTION:
				sequence_UndefinedInstruction(context, (UndefinedInstruction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Instruction returns AddCompileOptions
	 *     AddCompileOptions returns AddCompileOptions
	 *
	 * Constraint:
	 *     options+=ID+
	 */
	protected void sequence_AddCompileOptions(ISerializationContext context, AddCompileOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns AddExecutable
	 *     AddExecutable returns AddExecutable
	 *
	 * Constraint:
	 *     (name=Executable sources+=Path+)
	 */
	protected void sequence_AddExecutable(ISerializationContext context, AddExecutable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns AmentPackageInstruction
	 *     AmentPackageInstruction returns AmentPackageInstruction
	 *
	 * Constraint:
	 *     {AmentPackageInstruction}
	 */
	protected void sequence_AmentPackageInstruction(ISerializationContext context, AmentPackageInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns AmentTargetDependencies
	 *     AmentTargetDependencies returns AmentTargetDependencies
	 *
	 * Constraint:
	 *     (name=[Executable|ID] dependencies+=Path*)
	 */
	protected void sequence_AmentTargetDependencies(ISerializationContext context, AmentTargetDependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CMakeListsFile returns CMakeListsFile
	 *
	 * Constraint:
	 *     instructions+=Instruction+
	 */
	protected void sequence_CMakeListsFile(ISerializationContext context, CMakeListsFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns CMakeMinimumRequired
	 *     CMakeMinimumRequired returns CMakeMinimumRequired
	 *
	 * Constraint:
	 *     version=VERSION_TERMINAL
	 */
	protected void sequence_CMakeMinimumRequired(ISerializationContext context, CMakeMinimumRequired semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMakeListsPackage.Literals.CMAKE_MINIMUM_REQUIRED__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMakeListsPackage.Literals.CMAKE_MINIMUM_REQUIRED__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCMakeMinimumRequiredAccess().getVersionVERSION_TERMINALTerminalRuleCall_3_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Executable returns Executable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Executable(ISerializationContext context, Executable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMakeListsPackage.Literals.EXECUTABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMakeListsPackage.Literals.EXECUTABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecutableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns FindPackage
	 *     FindPackage returns FindPackage
	 *
	 * Constraint:
	 *     (name=ID required?='REQUIRED'? components+=ID*)
	 */
	protected void sequence_FindPackage(ISerializationContext context, FindPackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns IfInstruction
	 *     IfInstruction returns IfInstruction
	 *
	 * Constraint:
	 *     (predicate+='AND'* instructions+=Instruction*)
	 */
	protected void sequence_IfInstruction(ISerializationContext context, IfInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns InstallDirectory
	 *     InstallDirectory returns InstallDirectory
	 *
	 * Constraint:
	 *     (directory=Path destination=Path patterns+=STRING*)
	 */
	protected void sequence_InstallDirectory(ISerializationContext context, InstallDirectory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns InstallTargets
	 *     InstallTargets returns InstallTargets
	 *
	 * Constraint:
	 *     (targets+=[Executable|ID]* runtime?='RUNTIME'? destination=Path)
	 */
	protected void sequence_InstallTargets(ISerializationContext context, InstallTargets semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns ProjectInstruction
	 *     ProjectInstruction returns ProjectInstruction
	 *
	 * Constraint:
	 *     declaredPackageName=[DeclaredPackageName|ID]
	 */
	protected void sequence_ProjectInstruction(ISerializationContext context, ProjectInstruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CMakeListsPackage.Literals.PROJECT_INSTRUCTION__DECLARED_PACKAGE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CMakeListsPackage.Literals.PROJECT_INSTRUCTION__DECLARED_PACKAGE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjectInstructionAccess().getDeclaredPackageNameDeclaredPackageNameIDTerminalRuleCall_3_0_1(), semanticObject.eGet(CMakeListsPackage.Literals.PROJECT_INSTRUCTION__DECLARED_PACKAGE_NAME, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns SetInstruction
	 *     SetInstruction returns SetInstruction
	 *
	 * Constraint:
	 *     (variable=ID (arguments+=STRING | arguments+=Path | arguments+=INT)*)
	 */
	protected void sequence_SetInstruction(ISerializationContext context, SetInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns UndefinedInstruction
	 *     UndefinedInstruction returns UndefinedInstruction
	 *
	 * Constraint:
	 *     (name=ID (arguments+=STRING | arguments+=Path | arguments+=DECORATED_PACKAGE | arguments+=INT)*)
	 */
	protected void sequence_UndefinedInstruction(ISerializationContext context, UndefinedInstruction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
