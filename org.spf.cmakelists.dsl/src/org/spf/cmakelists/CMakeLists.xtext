// automatically generated by Xtext
grammar org.spf.cmakelists.CMakeLists with org.eclipse.xtext.common.Terminals

import "http://spf.org/cmakelists"  
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://spf.org/packagexml" as packagexml

CMakeListsFile returns CMakeListsFile:
	instructions+=Instruction*;

Instruction returns Instruction:
	CMakeMinimumRequired |
	ProjectInstruction |
	FindPackage |
	AddExecutable |
	AmentTargetDependencies |
	AmentPackageInstruction |
	InstallTargets |
	InstallDirectory |
	IfInstruction |
	SetInstruction |
	AddCompileOptions |
	UndefinedInstruction;

CMakeMinimumRequired returns CMakeMinimumRequired:
	'cmake_minimum_required' '(' 'VERSION' version=VERSION_TERMINAL ')';

ProjectInstruction returns ProjectInstruction:
	{ProjectInstruction}
	'project' '(' declaredPackageName=[packagexml::DeclaredPackageName] ')';

FindPackage returns FindPackage:
	{FindPackage}
	'find_package' '(' name=ID (required?='REQUIRED')? ("COMPONENTS" (components+=ID)+)? ')';

AddExecutable returns AddExecutable:
	'add_executable' '(' name=Executable (sources+=Path)+ ')';

Path:
	ID |
	ID "." ID |
	"$" "{" ID "}" |
	ID "/" Path;

Executable returns Executable:
	{Executable}
	name=ID;

AmentTargetDependencies returns AmentTargetDependencies:
	'ament_target_dependencies' '(' name=[Executable] (dependencies+=Path)* ')';

AmentPackageInstruction returns AmentPackageInstruction:
	{AmentPackageInstruction}
	'ament_package' '(' ')';

InstallTargets returns InstallTargets:
	'install' '('
	'TARGETS' (targets+=[Executable])*
	(runtime?='RUNTIME')?
	'DESTINATION' destination=Path
	')';

InstallDirectory returns InstallDirectory:
	'install' '('
	'DIRECTORY' directory=Path
	'DESTINATION' destination=Path
	("FILES_MATCHING" ("PATTERN" patterns+=STRING)+)?
	')';

IfInstruction returns IfInstruction:
	{IfInstruction}
	"if" "(" (predicate+="AND" | "OR" | "MATCHES" | ID | STRING)* ")"
	(instructions+=Instruction)*
	"endif" "(" ")";

SetInstruction returns SetInstruction:
	"set" "(" variable=ID
	((arguments+=(STRING | Path) | (arguments+=INT)))*
	")";

AddCompileOptions returns AddCompileOptions:
	"add_compile_options" "(" ("-" options+=ID)+ ")";

UndefinedInstruction returns UndefinedInstruction:
	name=ID "("
	((arguments+=(STRING | Path | DECORATED_PACKAGE) | (arguments+=INT)))*
	")";

terminal DECORATED_PACKAGE:
	ID "::" ID;

terminal VERSION_TERMINAL:
	INT ('.' INT)+;

@Override
terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;
	